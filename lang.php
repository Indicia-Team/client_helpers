<?php

/**
 * @file
 * Language localisation helper class.
 *
 * Indicia, the OPAL Online Recording Toolkit.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/gpl.html.
 *
 * @author Indicia Team
 * @license http://www.gnu.org/licenses/gpl.html GPL 3.0
 * @link https://github.com/indicia-team/client_helpers/
 */

/**
 * Link in other required php files.
 */
require_once 'lang/default.php';

/**
 * Language localisation helper class.
 *
 * Class providing static functions to obtain localised or customised terms for
 * use in output generated by the data_entry_helper class.
 * By default, retrieves terms from the lang/default.php file, unless a custom
 * terms file has been linked to the PHP page which overrides the requested
 * term.
 */
class lang {

  /**
   * Static function to obtain a customised or localised term.
   *
   * Any other parameters are treated as replacements for tags marked {1}, {2}
   * etc in the language string. These replacements should be already utf8
   * encoded.
   *
   * @param string $key
   *   Key identifying the term to get.
   *
   * @return string
   *   Translated term.
   */
  public static function get($key) {
    global $default_terms;
    global $custom_terms;
    $output = $key;
    $useHostsiteTranslation = function_exists('t') && !empty(helper_base::$delegate_translation_to_hostsite);
    if (isset($custom_terms) && array_key_exists($key, $custom_terms)) {
      $output = $custom_terms[$key];
    }
    elseif (array_key_exists($key, $default_terms)) {
      // Use default term if no custom terms, or absent from custom term list.
      $output = $default_terms[$key];
    }
    // Notranslate option in URL.
    if (isset($_GET['notranslate'])) {
      // For Drupal translation, we use the translated English term as the key
      // otherwise a lot of default instructions etc are lost. For Indicia
      // translations, the key itself is used.
      return $useHostsiteTranslation ? "[$output]" : "[$key]";
    }
    $args = func_get_args();
    if ($useHostsiteTranslation) {
      $output = self::applyDrupalTranslation($output, $args);
    }
    else {
      $output = self::applyArgs($output, $args);
    }
    return $output;
  }

  /**
   * Applies any supplied arguments as replacements in the translation.
   *
   * @param string $output
   *   The translated string, with replacement tokens still in place, e.g.
   *   "User {1} is logged in".
   * @param array $args
   *   Additional arguments passed to the lang::get function which act as
   *   replacements in the language string.
   *
   * @return string
   *   The translated string, with replacements applied, e.g.
   *   "User Foo is logged in".
   */
  private static function applyArgs($output, array $args) {
    // Now do any replacements using any additional function arguments.
    if (count($args) > 1) {
      // Get rid of the first argument, it is the language string key.
      array_shift($args);
      // Build a set of replacements.
      $argkeys = [];
      foreach ($args as $arg) {
        $argkeys[] = '/\{' . (count($argkeys) + 1) . '\}/';
      }
      // Replace the replacements with the function argument list.
      $output = preg_replace($argkeys, $args, $output);
    }
    return $output;
  }

  /**
   * Delegates translation to the Drupal hostsite.
   *
   * @param string $output
   *   The English string, with replacement tokens still in place, e.g.
   *   "User {1} is logged in".
   * @param array $args
   *   Additional arguments passed to the lang::get function which act as
   *   replacements in the language string.
   *
   * @return string
   *   The translated string, with replacements applied, e.g.
   *   "User Foo is logged in".
   */
  private static function applyDrupalTranslation($output, array $args) {
    // Now do any replacements using any additional function arguments.
    $tArgs = [];
    if (count($args) > 1) {
      // Get rid of the first argument, it is the language string key.
      array_shift($args);
      // Build a set of replacements.
      $argkeys = [];
      foreach ($args as $arg) {
        $argkeys[] = '/\{' . (count($argkeys) + 1) . '\}/';
        $tArgs['@arg' . (count($argkeys) + 1)] = $arg[0];
      }
      // Convert the indicia style args to Drupal style ones.
      $output = preg_replace($argkeys, array_keys($tArgs), $output);
    }
    $r = t($output, $tArgs);
    // Allow for Drupal 7/8 differences.
    return method_exists($r, 'render') ? $r->render() : $r;
  }

}
