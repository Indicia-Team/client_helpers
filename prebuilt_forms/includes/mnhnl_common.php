<?php
/**
 * Indicia, the OPAL Online Recording Toolkit.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/gpl.html.
 *
 * @package	Client
 * @subpackage PrebuiltForms
 * @author	Indicia Team
 * @license	http://www.gnu.org/licenses/gpl.html GPL 3.0
 * @link 	http://code.google.com/p/indicia/
 */
/*
 * Options: includeParentLookUp
 * 			loctoolsLocTypeID
 * 			usePolygons
 * 			includeLocationComment
 * 			includeLocationCode
 * 
 * TBD switch in WMS layer to select if present
 * TBD extend sref_system so can choose from drop down if > 1, else set to configured value.
 * TBD Convert locModTool to AJAX: return to locations page after saving
 * TBD put in check to enforce ParentLocationType and LocationType in options, loctools set?
 * TBD put in check to prevent/confirm selecting something else when existing selection is modified (will lose changes?).
 * TBD attributes to handle checkboxes, inc booleans.
 * TBD restrict location_attribute_values fetch in populateExtensions to location IDs in this square.
 * TBD put in check to ensure at least 1 geometry specified.
 * TBD Add zoom to commune: display boundary on map, restrict displayed sites to those in commune.
 * TBD Add control to undo changes to existing locations.
 * TBD Hide buttons that can't be used.
 * 
 * The location centroid sref will contain the central point of the geom.
 */


function iform_mnhnl_getParameters() {
  return
      array(
        array(
          'name'=>'locationMode',
          'caption'=>'Mode of Location Operation',
          'description'=>'Describes the main method of handling locations',
          'type'=>'select',
          'options' => array(
            'single' => 'Simple site choice, no parent locations',
            'parent' => 'Single site choosen using a Parent location',
            'multi' => 'Multiple sites (under a parent Location) processed at the same time.'
          ),
          'default' => 'single',
          'group' => 'Locations'
        ),
        array(
          'name'=>'usePoints',
          'caption'=>'Use Points for locations',
          'description'=>'Describes Type of Points to be included when creating a locations generated by form',
          'type'=>'select',
          'options' => array(
            'none' => 'None',
            'single' => 'Single',
            'multi' => 'Multiple'
          ),
          'default' => 'None',
          'group' => 'Locations'
        ),
        array(
          'name'=>'useLines',
          'caption'=>'Use Lines for locations',
          'description'=>'Describes Type of Lines to be included when creating a locations generated by form',
          'type'=>'select',
          'options' => array(
            'none' => 'None',
            'single' => 'Single',
            'multi' => 'Multiple'
          ),
          'default' => 'None',
          'group' => 'Locations'
        ),
        array(
          'name'=>'usePolygons',
          'caption'=>'Use Polygons for locations',
          'description'=>'Describes Type of Polygons to be included when creating a locations generated by form',
          'type'=>'select',
          'options' => array(
            'none' => 'None',
            'single' => 'Single',
            'multi' => 'Multiple'
          ),
          'default' => 'None',
          'group' => 'Locations'
        ),
        // we use the locTools location type ID for the parent
        array(
          'name'=>'locationTypeTermListExtKey',
          'caption'=>'Location Type Term List',
          'description'=>'External Key for the Term List used to look up the terms for the Location Types.',
          'type'=>'string',
          'default'=>'mnhnl:loctype',
          'required' => true,
          'group' => 'Locations'
        ),
        array(
          'name'=>'LocationTypeTerm',
          'caption'=>'Primary Site Location Type Term',
          'description'=>"Term in the 'Location Type Term List' above used to provide the Location Type ID for new sites. For the non-parent location based mode, and when using Location Tools to assign locations to users, this is not needed as the 'Location Tools Location Type ID' is used instead.",
          'type'=>'string',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'SecondaryLocationTypeTerm',
          'caption'=>'Secondary Site Location Type Term',
          'description'=>"Term in the 'Location Type Term List' above used to provide the Location Type ID for sites. Exact functionality differences when using this compared to the Primary term is dependant on the form itself. When provided, an extra field is provided in the Mod Tool to allow admins the ability to change the Location Type.",
          'type'=>'string',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'includeLocationComment',
          'caption'=>'What to do with Location Comments',
          'caption'=>'Include Location Comment when viewing location data',
          'description'=>'Choose whether to include the location comment in the list of fields which can be set.',
          'type'=>'boolean',
          'default' => true,
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'includeLocationCode',
          'caption'=>'Include Location Code when viewing location data',
          'description'=>'Choose whether to include the location code in the list of fields which can be modified by the Locations Modification Tool.',
          'type'=>'boolean',
          'default' => true,
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'siteNameTermListID',
          'caption'=>'Use Termlist for Site Names',
          'description'=>'Use this termlist ID for the site names. Omit to allow text entry.',
          'type'=>'int',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'extendLocationNameTemplate',
          'caption'=>'Template for Site Names',
          'description'=>'Use this to generated the site names. Use attribute captions surrounded by braces as strings to be replaced, also {name} and {code}. If not provided will default to location name.',
          'type'=>'string',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'zoomLevel',
          'caption'=>'Default map zoom level for location modification tool when jumping to a site',
          'description'=>'0 (zoomed out) to 19 (zoomed in). This is for the location modification tool, not the data entry location module - the zoom level for this needs to be set in the arguments to the map control in the user interface.',
          'type'=>'int',
          'default' => 15,
          'group' => 'Locations'
        ),
        array(
          'name'=>'includeNumSites',
          'caption'=>'Display the number of sites in that parent',
          'description'=>'When a Parent is defined, display a field giving a count of the number of sites in that parent.',
          'type'=>'boolean',
          'default' => false,
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'labelZoomLevel',
          'caption'=>'Map zoom level at which site labels are displayed',
          'description'=>'0 (zoomed out) to 19 (zoomed in). More zoomed out than this are labels are not displayed.',
          'type'=>'int',
          'default' => 12,
          'group' => 'Locations'
        ),
        array(
          'name'=>'labelAlign',
          'caption'=>'OpenLayers label Alignment',
          'description'=>'When creating the label for the sites, this defines the label positioning as specified by the Openlayers.Feature.Vector.Style.',
          'type'=>'string',
          'default' => 'cm',
          'group' => 'Locations'
        ),
        array(
          'name'=>'labelXOffset',
          'caption'=>'OpenLayers Label X Offset',
          'description'=>'When creating the label for the sites, this defines the label positioning as specified by the Openlayers.Feature.Vector.Style.',
          'type'=>'int',
          'default' => '0',
          'group' => 'Locations'
        ),
        array(
          'name'=>'shpFileDownloadURL',
          'caption'=>'Shape File Download URL',
          'description'=>'Proxied URL to use to access the geoserver to allow the download of the shape files.',
          'type'=>'string',
          'required' => false,
          'group' => 'Locations'
        ),
        array(
          'name'=>'shpFileFeaturePrefix',
          'caption'=>'Shape File Feature Prefix',
          'description'=>'Feature Prefix to use to access the geoserver to allow the download of the shape files.',
          'type'=>'string',
          'required' => false,
          'group' => 'Locations'
        )
        );
}
function iform_mnhnl_locModTool($auth, $args, $node) {
  global $indicia_templates;
  if (!isset($args['clientSideValidation']) || $args['clientSideValidation'])
      data_entry_helper::enable_validation('entry_form');
  if($args['locationMode']=='multi') $args['locationMode']='parent';
  data_entry_helper::$entity_to_load=array();
  if($args['shpFileDownloadURL']==""){
    $retVal = "<div id=\"locations\">";
  } else {
    $request= $args['shpFileDownloadURL']."/geoserver/wfs?request=GetFeature&service=wfs&version=1.0.0&outputformat=SHAPE-ZIP&srsName=EPSG:2169";
    if($args['LocationTypeTerm']=='' && isset($args['loctoolsLocTypeID'])) $args['LocationTypeTerm']=$args['loctoolsLocTypeID'];
    $primary = iform_mnhnl_getTermID($auth, $args['locationTypeTermListExtKey'],$args['LocationTypeTerm']);
    if($args['SecondaryLocationTypeTerm'] != ''){
      $secondary = iform_mnhnl_getTermID($auth, $args['locationTypeTermListExtKey'],$args['SecondaryLocationTypeTerm']);
      $request.="&cql_filter= location_type_id=".$primary."OR location_type_id=".$secondary;
    } else {
      $request.="&cql_filter=location_type_id=".$primary;
    }
    $request .= "&typename=".$args['shpFileFeaturePrefix'].':';
    if($args['usePoints']!='none')   $retVal = "<a href=\"".$request."point_locations\">".lang::get('Points')."</a>";
    if($args['useLines']!='none')    $retVal .= ($retVal == "" ? "" : " : ")."<a href=\"".$request."line_locations\">".lang::get('Lines')."</a>";
    if($args['usePolygons']!='none') $retVal .= ($retVal == "" ? "" : " : ")."<a href=\"".$request."polygon_locations\">".lang::get('Polygons')."</a>";
    $retVal = "<div id=\"locations\" >
      <fieldset><legend>".lang::get('LANG_SHP_Download_Legend')."</legend>
      <p>".lang::get('LANG_Shapefile_Download')." ".$retVal."</p></fieldset>";
  }
  $retVal .= "<form method=\"post\" id=\"entry_form\">".
          $auth['write'].
          "<input type=\"hidden\" id=\"source\" name=\"source\" value=\"iform_mnhnl_locModTool\" />".
          "<input type=\"hidden\" id=\"website_id\" name=\"website_id\" value=\"".$args['website_id']."\" />".
          "<input type=\"hidden\" id=\"survey_id\" name=\"survey_id\" value=\"".$args['survey_id']."\" />";
  $retVal .= iform_mnhnl_lux5kgridControl($auth, $args, $node, 
      array('initLoadArgs' => '{}',
       'Instructions2' => lang::get('LANG_LocModTool_Instructions2'),
       'mainFieldLabel' => lang::get('LANG_LocModTool_IDLabel'),
       'NameLabel' => lang::get('LANG_LocModTool_NameLabel'),
       'canCreate'=>false
       ));
  // location comments are included as a separate control on the main form.
  if(isset($args['includeLocationComment']) && $args['includeLocationComment'])
    $retVal .= data_entry_helper::textarea(array(
      'ide'=>'location-comment',
      'fieldname'=>'location:comment',
      'label'=>lang::get("LANG_LocationModTool_CommentLabel")))."<br />";
  $retVal .= iform_mnhnl_locationattributes($auth, $args, '', array("lookUpKey"=>"meaning_id", "sep"=>" ", "class"=>"wide"));
  $retVal .= "<label for=\"location-delete\">".lang::get("LANG_LocModTool_DeleteLabel")." : </label><input type=checkbox id=\"location-delete\" name=\"location:deleted\" value='t'><br />
  <p>".lang::get("LANG_LocModTool_DeleteInstructions")."</p>";
  $retVal .= iform_mnhnl_SrefFields($auth, $args, true);
  // For main page we force to Tabs to ensure map drawn correctly
  $args['interface']='Tabs';
  $mapOptions = iform_map_get_map_options($args,$readAuth);
  $olOptions = iform_map_get_ol_options($args);
  $mapOptions['tabDiv'] = 'locations';
  $mapOptions['standardControls']=array('layerSwitcher','panZoomBar');
  $mapOptions['layers']=array("ParentLocationLayer","SiteLabelLayer","SiteAreaLayer","SitePathLayer","SitePointLayer");
  $mapOptions['editLayer']=false;
  $mapOptions['maxZoom']=$args['zoomLevel'];
  $retVal .= data_entry_helper::map_panel($mapOptions, $olOptions);
  $retVal .= iform_mnhnl_PointGrid($auth, $args, array('srefs'=>'2169,LUREF (m),X,Y,;4326,Lat/Long Deg,Lat,Long,D;4326,Lat/Long Deg:Min,Lat,Long,DM;4326,Lat/Long Deg:Min:Sec,Lat,Long,DMS'));
  $retVal .= '<input type="submit" class="ui-state-default ui-corner-all" value="'.lang::get('LANG_Submit').'">
  </form></div>';
  data_entry_helper::$javascript .= "
jQuery(\"#location_parent_id\").val('').change();
";
  return $retVal;
}

function iform_mnhnl_recordernamesControl($node, $auth, $args, $tabalias, $options) {
    $values = array();
  	$userlist = array();
    $results = db_query('SELECT uid, name FROM {users}');
    while($result = db_fetch_object($results)){
    	$account = user_load($result->uid);
    	if($account->uid != 1 && user_access('IForm n'.$node->nid.' user', $account)){
			$userlist[$result->name] = $result->name;
		}
    }
    if (isset(data_entry_helper::$entity_to_load['sample:recorder_names'])){
      if(!is_array(data_entry_helper::$entity_to_load['sample:recorder_names']))
        $values = explode("\r\n", data_entry_helper::$entity_to_load['sample:recorder_names']);
      else
        $values = data_entry_helper::$entity_to_load['sample:recorder_names'];
    }
    foreach($values as $value){
      $userlist[$value] = $value;
    }
    $r = data_entry_helper::listbox(array_merge(array(
      'id'=>'sample:recorder_names',
      'fieldname'=>'sample:recorder_names[]',
      'label'=>lang::get('Recorder names'),
      'size'=>6,
      'multiselect'=>true,
      'default'=>$values,
      'lookupValues'=>$userlist
      ,'validation'=>array('required')
    ), $options));
    return $r."<span>".lang::get('LANG_RecorderInstructions')."</span><br />";
  }

function iform_mnhnl_lux5kgridControl($auth, $args, $node, $options) {
    global $indicia_templates, $user;
    $options = array_merge(array('initLoadArgs' => '{}',
       'Instructions1' => lang::get('LANG_CommonInstructions1'),
       'Instructions2' => lang::get('LANG_DE_Instructions2'),
       'mainFieldLabel' => lang::get('LANG_DE_LocationIDLabel'),
       'parentFieldLabel' => lang::get('LANG_CommonParentLabel'),
       'NameLabel' => lang::get('LANG_CommonLocationNameLabel'),
       'CodeLabel' => lang::get('LANG_CommonLocationCodeLabel')
      ), $options);
    switch($args['locationMode']){
      case 'multi' :
       $options = array_merge(array('parentFieldID' => 'sample_location_id',
                                    'parentFieldName' => 'sample:location_id',
                                    'mainFieldID' => 'dummy_location_id',
                                    'mainFieldName' => 'dummy:location_id'
                              ), $options);
       break;
      default : // parent and single
       $options = array_merge(array('parentFieldID' => 'location_parent_id',
                                    'parentFieldName' => 'location:parent_id',
                                    'mainFieldID' => 'location_id',
                                    'mainFieldName' => 'location:id'
                              ), $options);
        break;
    }
    $creatorAttr=iform_mnhnl_getAttrID($auth, $args, 'location', 'Creator');
    if(isset(data_entry_helper::$entity_to_load["sample:updated_by_id"])) // only set if data loaded from db, not error condition
      data_entry_helper::load_existing_record($auth['read'], 'location', data_entry_helper::$entity_to_load["sample:location_id"]);
    $retVal = '';
    if($args['LocationTypeTerm']=='' && isset($args['loctoolsLocTypeID'])) $args['LocationTypeTerm']=$args['loctoolsLocTypeID'];
    $primary = iform_mnhnl_getTermID($auth, $args['locationTypeTermListExtKey'],$args['LocationTypeTerm']);
    if($args['SecondaryLocationTypeTerm'] != ''){
      $secondary = iform_mnhnl_getTermID($auth, $args['locationTypeTermListExtKey'],$args['SecondaryLocationTypeTerm']);
      $loctypequery="\"&query=\"+escape(JSON.stringify({'in': ['location_type_id', [$primary, $secondary]]}))";
      $loctypeParam=array($primary,$secondary);
    } else {
      $loctypequery="\"&location_type_id=".$primary."\"";
      $loctypeParam=$primary;
    }
    // $retVal .= "<p>".print_r($options,true)."</p>";
    data_entry_helper::$javascript .= "
// Create vector layers: one to display the Parent Square onto, and another for the site locations list
// the default edit layer is used for this sample
ParentLocStyleMap = new OpenLayers.StyleMap({\"default\": new OpenLayers.Style({strokeColor: \"Yellow\",fillOpacity: 0,strokeWidth: 4})});
ParentLocationLayer = new OpenLayers.Layer.Vector('Parents',{styleMap: ParentLocStyleMap,displayInLayerSwitcher: false});

defaultPointStyle = new OpenLayers.Style({pointRadius: 6,fillColor: \"Red\",fillOpacity: 0.3,strokeColor: \"Yellow\",strokeWidth: 1});
selectPointStyle = new OpenLayers.Style({pointRadius: 6,fillColor: \"Blue\",fillOpacity: 0.3,strokeColor: \"Yellow\",strokeWidth: 2});
defaultStyle = new OpenLayers.Style({pointRadius: 6, fillColor: \"Red\",fillOpacity: 0.3,strokeColor: \"Red\",strokeWidth: 1});
selectStyle = new OpenLayers.Style({fillColor: \"Blue\",fillOpacity: 0.3,strokeColor: \"Blue\",strokeWidth: 2});
//defaultLabelStyle = new OpenLayers.Style({fontColor: \"Yellow\", labelAlign: \"".$args['labelAlign']."\", labelXOffset: ".$args['labelXOffset'].", labelSelect: true});
dragPointStyleHash={pointRadius: 6,fillColor: \"Fuchsia\",fillOpacity: 0.3,strokeColor: \"Fuchsia\",strokeWidth: 1};
// Interesting behaviour of the Points: when any mod control is active it creates a set of vertices which can be 
// dragged, allowing the existing geometry to be modified. All fine for Lines and polygons, but for points
// the vertices are generated in the default style, and appear over the top of our existing geometry, so
// effectively making it appear unselected! 
// We want consistent colouring, so
// 1) normal=red, yellow surrounds points
// 2) highlighted=blue, yellow surrounds points
// 3) Drag points=purple.

SitePointStyleMap = new OpenLayers.StyleMap({\"default\": defaultPointStyle, \"select\": selectPointStyle});
SiteStyleMap = new OpenLayers.StyleMap({\"default\": defaultStyle, \"select\": selectStyle});
//SiteLabelStyleMap = new OpenLayers.StyleMap({\"default\": defaultLabelStyle});

".($args['SecondaryLocationTypeTerm'] != '' ?
"SiteListPrimaryLabelStyleHash={fontColor: \"Red\", labelAlign: \"".$args['labelAlign']."\", labelXOffset: ".$args['labelXOffset'].", labelSelect: true, fontSize: \"1.2em\", fontWeight: \"bold\"};
SiteListSecondaryLabelStyleHash" : "
SiteListSecondaryLabelStyleHash={};
SiteListPrimaryLabelStyleHash")."={fontColor: \"Yellow\", labelAlign: \"".$args['labelAlign']."\", labelXOffset: ".$args['labelXOffset'].", labelSelect: true};

//SitePointLayer = new OpenLayers.Layer.Vector('Site Points',{styleMap: SitePointStyleMap, displayInLayerSwitcher: false});
SitePointLayer = new OpenLayers.Layer.Vector('Site Points',{styleMap: SitePointStyleMap});
SitePathLayer = new OpenLayers.Layer.Vector('Site Paths',{styleMap: SiteStyleMap, displayInLayerSwitcher: false});
SiteAreaLayer = new OpenLayers.Layer.Vector('Site Areas',{styleMap: SiteStyleMap, displayInLayerSwitcher: false});
SiteLabelLayer = new OpenLayers.Layer.Vector('Site Labels',{//styleMap: SiteLabelStyleMap, 
displayInLayerSwitcher: false});
// not happy about centroid calculations: lines and multipoints seem to take first vertex
_getCentroid = function(geometry){
  var retVal;
  retVal = {sumx: 0, sumy: 0, count: 0};
  switch(geometry.CLASS_NAME){
    case \"OpenLayers.Geometry.Point\":
      retVal = {sumx: geometry.x, sumy: geometry.y, count: 1};
      break;
    case \"OpenLayers.Geometry.MultiPoint\":
    case \"OpenLayers.Geometry.MultiLineString\":
    case \"OpenLayers.Geometry.LineString\":
    case \"OpenLayers.Geometry.MultiPolygon\":
    case \"OpenLayers.Geometry.Collection\":
      var retVal = {sumx: 0, sumy: 0, count: 0};
      for(var i=0; i< geometry.components.length; i++){
        var point=_getCentroid(geometry.components[i]);
        retVal = {sumx: retVal.sumx+point.sumx, sumy: retVal.sumy+point.sumy, count: retVal.count+point.count};
      }
      break;
    case \"OpenLayers.Geometry.Polygon\": // only do outer ring
      var point=geometry.getCentroid();
      retVal = {sumx: point.x*geometry.components[0].components.length, sumy: point.y*geometry.components[0].components.length, count: geometry.components[0].components.length};
      break;
  }
  return retVal;
}
getCentroid=function(geometry){
  var oddball=_getCentroid(geometry);
  return new OpenLayers.Geometry.Point(oddball.sumx/oddball.count, oddball.sumy/oddball.count);
}
recalcNumSites = function(){
  var sitearray = {};
  var allFeatures = SiteAreaLayer.features.concat(SitePathLayer.features,SitePointLayer.features);
  // don't need to consider Label layer...
  for(var i=0; i< allFeatures.length; i++){
    if(typeof allFeatures[i].attributes.SiteNum != 'undefined')
      sitearray['x'+allFeatures[i].attributes.SiteNum.toString()] = true;
  }
  var count = 0;
  for (x in sitearray) count++;
  jQuery('#dummy-num-sites').val(count);
};
recalcNumSites();
clearLocation = function(){ // clears all the data in the fields.
  jQuery('#".$options['mainFieldID'].($args['locationMode']!='multi' ? ",#sample-location-name,#sample-location-id" : "").",#location-name,#centroid_sref,#imp-srefX,#imp-srefY,#centroid_geom,#boundary_geom,[name=location\\:comment],#location-code').val('');
  jQuery('#location_location_type_id').val('$primary');
  jQuery('[name^=locAttr\\:]').each(function(){
    var name = jQuery(this).attr('name').split(':');
    jQuery(this).attr('name', name[0]+':'+name[1]);
  });
  // radio buttons all share the same name, only one checked.
  jQuery('[name^=locAttr\\:]').filter(':radio').removeAttr('checked');
  jQuery('[name^=locAttr\\:]').filter(':text').val('');
  if(typeof hook_set_defaults != 'undefined') hook_set_defaults();
}
setPermissions = function(enableItems, disableItems){
  if(disableItems.length > 0) jQuery(disableItems.join(',')).attr('disabled',true);
  if(enableItems.length > 0) jQuery(enableItems.join(',')).removeAttr('disabled');
}
// sets the permissions when there is nothing selected, and no parent is provided
setPermissionsNoParent = function(){
  setPermissions([],
                 ['[name=locations_website\\:website_id]',
                  '#".$options['mainFieldID']."',
                  '[name=location\\:code]',
                  '[name=location\\:name]',
                  '[name=location\\:comment]',
                  '[name=location\\:location_type_id]',
                  '[name=location\\:deleted]',
                  '[name^=locAttr\\:]',
                  '#dummy-name',
                  '#imp-sref',
                  '#imp-geom',
                  '#imp-boundary-geom']);
}
setPermissionsNoSite = function(){
  setPermissions(['#".$options['mainFieldID']."'], // can choose site from drop down.
                 ['[name=locations_website\\:website_id]',
                  '[name=location\\:code]',
                  '[name=location\\:name]',
                  '[name=location\\:comment]',
                  '[name=location\\:location_type_id]',
                  '[name=location\\:deleted]',
                  '[name^=locAttr\\:]',
                  '#dummy-name',
                  '#imp-sref',
                  '#imp-geom',
                  '#imp-boundary-geom']);
}
setPermissionsOldEditableSite = function(){
  setPermissions(['#".$options['mainFieldID']."',
                  '[name=location\\:code]',
                  '[name=location\\:name]',
                  '[name=location\\:comment]',
                  '[name=location\\:location_type_id]',
                  '[name=location\\:deleted]',
                  '[name^=locAttr\\:]',
                  '#dummy-name',
                  '#imp-sref',
                  '#imp-geom',
                  '#imp-boundary-geom'],
                 ['[name=locations_website\\:website_id]']);
}
setPermissionsOldReadOnlySite = function(){
  setPermissions(['#".$options['mainFieldID']."'],
                 ['[name=locations_website\\:website_id]',
                  '[name=location\\:code]',
                  '[name=location\\:name]',
                  '[name=location\\:comment]',
                  '[name=location\\:location_type_id]',
                  '[name=location\\:deleted]',
                  '[name^=locAttr\\:]',
                  '#dummy-name',
                  '#imp-sref',
                  '#imp-geom',
                  '#imp-boundary-geom']);
}
setPermissionsNewSite = function(){
  // when creating a new site, it is possible to select an old site from the drop down, provided there are some to select.
  var enable = ['[name=locations_website\\:website_id]',
                '[name=location\\:code]',
                '[name=location\\:name]',
                '[name=location\\:comment]',
                '[name=location\\:location_type_id]',
                '[name^=locAttr\\:]',
                '#dummy-name',
                '#imp-sref',
                '#imp-geom',
                '#imp-boundary-geom'];
  var disable = ['[name=location\\:deleted]'];
  var allFeatures = SiteAreaLayer.features.concat(SitePathLayer.features,SitePointLayer.features);
  var haveOld=false;
  for(var i=0; i<allFeatures.length; i++){
    if(allFeatures[i].attributes.new==false){
      haveOld=true;
    }}
  if(haveOld){
    enable.push('#".$options['mainFieldID']."');  // in case we want to change to an existing site.
  } else {
    disable.push('#".$options['mainFieldID']."');
  }
  setPermissions(enable,disable);
}
loadLocation = function(feature){ // loads all the data into the location fields from a feature.
  if(feature.attributes.new)
    setPermissionsNewSite();
  else if (feature.attributes.canEdit)
    setPermissionsOldEditableSite();
  else
    setPermissionsOldReadOnlySite();
".($args['locationMode']=='multi' ?
"  var mySelector = '#dummy-name';
" : "  var mySelector = '#location-name';
  clearLocation();
")."
".($args['siteNameTermListID']!="" ? "  jQuery(mySelector).find('option').removeAttr('disabled');
" : "").
"  // the label is stored in the SiteLabelLayer. For new locations this is the only place the name is stored in the generic module.
  for(var i=0; i< SiteLabelLayer.features.length; i++){
    if(typeof SiteLabelLayer.features[i].attributes.SiteNum != 'undefined'){
      if(feature.attributes.SiteNum == SiteLabelLayer.features[i].attributes.SiteNum){
        jQuery('#dummy-name').val(SiteLabelLayer.features[i].style.label);
      }
".($args['siteNameTermListID']!="" ? "      else {
        jQuery(mySelector).find('option').filter('[value='+SiteLabelLayer.features[i].style.label+']').attr('disabled','disabled');
      }
" : "").
"    }
  }
".($args['locationMode']=='multi' ?
"" : "  jQuery(\"#".$options['mainFieldID'].",#sample-location-id\").val(feature.attributes.data.id);
  // parent_id is left as is in drop down if present. Not multi so must be an existing site.
  jQuery('#location-name,#sample-location-name').val(feature.attributes.data.name);
  jQuery('#location_location_type_id').val(feature.attributes.data.location_type_id);
  jQuery('[name=location\\:comment]').val(feature.attributes.data.comment);
  jQuery('#location-code').val(feature.attributes.data.code);
  jQuery('#imp-geom').val(feature.attributes.data.centroid_geom);
  jQuery('#imp-boundary-geom').val(feature.attributes.data.boundary_geom);
  setSref(feature.geometry, feature.attributes.data.centroid_sref);
  jQuery.getJSON('".data_entry_helper::$base_url."/index.php/services/data/location_attribute_value' +
            '?mode=json&view=list&auth_token=".$auth['read']['auth_token']."&nonce=".$auth['read']["nonce"]."&location_id='+feature.attributes.data.id+'&callback=?', function(data) {
    if(data instanceof Array && data.length>0){
      for (var i=0;i<data.length;i++){
        if (data[i].id) {
          // no multiselect or boolean checkboxes at the moment so don't code
          var radiobuttons = jQuery('[name=locAttr\\:'+data[i]['location_attribute_id']+'],[name^=locAttr\\:'+data[i]['location_attribute_id']+'\\:]').filter(':radio');
          if(radiobuttons.length > 0){ // radio buttons all share the same name, only one checked.
            radiobuttons.attr('name', 'locAttr:'+data[i]['location_attribute_id']+':'+data[i].id)
                  .filter('[value='+data[i].raw_value+']').attr('checked', 'checked');
          } else {
            jQuery('[name=locAttr\\:'+data[i]['location_attribute_id']+']')
                      .attr('name', 'locAttr:'+data[i]['location_attribute_id']+':'+data[i].id).val(data[i].raw_value);
          }
        }
      }
     }});
")."
  if(typeof hook_loadLocation != 'undefined')
    hook_loadLocation(feature);
}
checkEditable = function(isNew, id){
  if(isNew) return true; // if I have created a new Site in this session, I can edit it.
  if(typeof canEditExistingSites != 'undefined') return canEditExistingSites;
  return(SiteEditable[id]);
}
loadFeatures = function(parent_id, child_id, childArgs, loadParent, setSelectOptions){
  ParentLocationLayer.destroyFeatures();
  SiteLabelLayer.destroyFeatures();
  SiteAreaLayer.destroyFeatures();
  SitePathLayer.destroyFeatures();
  SitePointLayer.destroyFeatures();
  if(setSelectOptions)
    jQuery('#".$options['mainFieldID']."').find('option').remove();
  if(child_id == ''){
    clearLocation();
  }
  deactivateControls();
  recalcNumSites();
  SiteNum=0;
  if(parent_id != '' && loadParent){
    jQuery.getJSON(\"".data_entry_helper::$base_url."/index.php/services/data/location/\"+parent_id+\"?mode=json&view=detail&auth_token=".$auth['read']['auth_token']."&nonce=".$auth['read']["nonce"]."&callback=?\",
      function(data) {
       if (data.length>0) {
         var parser = new OpenLayers.Format.WKT();
         if(data[0].boundary_geom){ // only one location if any
           var feature = parser.read(data[0].boundary_geom)
           ParentLocationLayer.addFeatures([feature]);
           if(child_id == '') ParentLocationLayer.map.zoomToExtent(ParentLocationLayer.getDataExtent());
         }
         selectFeature.activate();
".($args['locationMode']=='multi' ? "  jQuery('#sample-location-name').val(data[0].name);" : "").
"       }});
  }
  if(!loadParent) selectFeature.activate();
  if(parent_id != '' || loadParent==false){
    jQuery.getJSON(\"".data_entry_helper::$base_url."/index.php/services/data/location?mode=json&view=detail&auth_token=".$auth['read']['auth_token']."&nonce=".$auth['read']["nonce"]."&callback=?&orderby=name\"+".$loctypequery."+(loadParent ? '&parent_id='+parent_id : ''),
      function(data) {
        if (data.length>0) {
          setPermissionsNoSite();
          if(child_id=='') selectFeature.activate(); // we have things we can select
          if(setSelectOptions)
            jQuery(\"#".$options['mainFieldID']."\").append('<option value=\"\">".lang::get("LANG_CommonEmptyLocationID")."</option>');
          var parser = new OpenLayers.Format.WKT();
          var locationList = [];
          for (var i=0;i<data.length;i++){
            var centreFeature = false;
            var feature;
            SiteNum++;
            if(data[i].boundary_geom){
              feature = parser.read(data[i].boundary_geom); // assume map projection=900913, if GEOMETRYCOLLECTION this will be an array or its children!
              var centre = false;
              if(data[i].centroid_geom) {
                centreFeature = parser.read(data[i].centroid_geom); // assume map projection=900913
              }
              var pointFeature = false;
              var lineFeature = false;
              var areaFeature = false;
              if(typeof(feature)=='object'&&(feature instanceof Array)){
                for(var j=0; j< feature.length; j++){
                  switch(feature[j].geometry.CLASS_NAME){
                    case \"OpenLayers.Geometry.Point\":
                    case \"OpenLayers.Geometry.MultiPoint\":
                      pointFeature = feature[j];
                      break;
                    case \"OpenLayers.Geometry.LineString\":
                    case \"OpenLayers.Geometry.MultiLineString\":
                      lineFeature = feature[j];
                      break;
                    default:
                      areaFeature = feature[j];
                      break;
                  }
                }
              } else {
                switch(feature.geometry.CLASS_NAME){
                  case \"OpenLayers.Geometry.Point\":
                  case \"OpenLayers.Geometry.MultiPoint\":
                    pointFeature = feature;
                    break;
                  case \"OpenLayers.Geometry.LineString\":
                  case \"OpenLayers.Geometry.MultiLineString\":
                    lineFeature = feature;
                    break;
                  default:
                    areaFeature = feature;
                    break;
                }
              }
              if(areaFeature) {
                areaFeature.attributes = {highlighted: false, new: false, canEdit: checkEditable(false, data[i].id), SiteNum: SiteNum, data: data[i]};
                SiteAreaLayer.addFeatures([areaFeature]);
                if(!centreFeature) centreFeature = new OpenLayers.Feature.Vector(getCentroid(areaFeature.geometry));
              }
              if(lineFeature) {
                lineFeature.attributes = {highlighted: false, new: false, canEdit: checkEditable(false, data[i].id), SiteNum: SiteNum, data: data[i]};
                SitePathLayer.addFeatures([lineFeature]);
                if(!centreFeature) centreFeature = new OpenLayers.Feature.Vector(getCentroid(lineFeature.geometry));
              }
              if(pointFeature) {
                pointFeature.attributes = {highlighted: false, new: false, canEdit: checkEditable(false, data[i].id), SiteNum: SiteNum, data: data[i]};
                SitePointLayer.addFeatures([pointFeature]);
                if(!centreFeature) centreFeature = new OpenLayers.Feature.Vector(getCentroid(pointFeature.geometry));
              }
            } else {
              // no boundary, only a centre point.
              feature = parser.read(data[i].centroid_geom); // assume map projection=900913
              centreFeature = feature.clone();
              feature.attributes = {highlighted: false, new: false, canEdit: checkEditable(false, data[i].id), SiteNum: SiteNum, data: data[i]};
              SitePointLayer.addFeatures([feature]);
            }
            centreFeature.attributes = {highlighted: false, new: false, canEdit: checkEditable(false, data[i].id), SiteNum: SiteNum, data: data[i]};
".($args['SecondaryLocationTypeTerm'] != '' ?
"            if(data[i].location_type_id == $secondary){
              centreFeature.style = jQuery.extend({}, SiteListSecondaryLabelStyleHash);
            } else 
  " : "").
"            centreFeature.style = jQuery.extend({}, SiteListPrimaryLabelStyleHash);
            centreFeature.style.label = data[i].name;
            SiteLabelLayer.addFeatures([centreFeature]);
            locationList.push({id : data[i].id, feature : centreFeature});
            if(setSelectOptions){
              if(child_id != '' && data[i].id == child_id){
                jQuery(\"#".$options['mainFieldID']."\").append('<option value=\"'+data[i].id+'\" selected=\"selected\">'+data[i].name+'</option>');
              } else {
                jQuery(\"#".$options['mainFieldID']."\").append('<option value=\"'+data[i].id+'\">'+data[i].name+'</option>');
              }
            }
            if(child_id==data[i].id){
              if(centreFeature.attributes.canEdit){
                setPermissionsOldEditableSite();
              } else {
                setPermissionsOldReadOnlySite()
              }
            }
            if(typeof hook_ChildFeatureLoad != 'undefined') hook_ChildFeatureLoad(feature, data[i], child_id, childArgs);
          }
          recalcNumSites();
          ".($args['locationMode']=='single' ? "" : "if(setSelectOptions) ")."populateExtensions(locationList);
        } else if(setSelectOptions){
          setPermissionsNoParent();
          jQuery('#".$options['mainFieldID']."').append('<option value=\"\">".lang::get("LANG_NoSitesInSquare")."</option>');
        }
    });
  } else {
    setPermissionsNoParent();
    if(setSelectOptions)
      jQuery('#".$options['mainFieldID']."').append('<option value=\"\">".lang::get("LANG_CommonChooseParentFirst")."</option>');
  }
};
populateExtensions = function(locids){
";
    if($args['extendLocationNameTemplate']!="") {
      data_entry_helper::$javascript .= "  locList = [];
  for(var i=0;i<locids.length;i++){
    var template = \"".$args['extendLocationNameTemplate']."\".replace('{name}',locids[i].feature.attributes.data.name);
    template = template.replace('{code}',locids[i].feature.attributes.data.code);
    locList.push({id : locids[i].id,
        feature : locids[i].feature,
        template : template});
  }
  jQuery.getJSON('".data_entry_helper::$base_url."/index.php/services/data/location_attribute_value' +
            '?mode=json&view=list&auth_token=".$auth['read']['auth_token']."&nonce=".$auth['read']["nonce"]."&callback=?', function(data) {
    if(data instanceof Array && data.length>0){
      templateReplace = function(template, id, att_id, attList, caption){
        var found=false;
        for (var i=0;i<attList.length;i++){
          if (attList[i].id && attList[i].location_id == id && attList[i].location_attribute_id==att_id){
            found=true;
            template = template.replace('{'+caption+'}',attList[i].value);
            }}
        if(!found){
          template = template.replace('{'+caption+'}','-');
        }
        return template;
      };
      for (var j=0;j<locList.length;j++){
";
    $attrArgs = array(
       'valuetable'=>'location_attribute_value',
       'attrtable'=>'location_attribute',
       'key'=>'location_id',
       'fieldprefix'=>'locAttr',
       'extraParams'=>$auth['read'],
       'survey_id'=>$args['survey_id']
      );
    $locationAttributes = data_entry_helper::getAttributes($attrArgs, false);
    foreach($locationAttributes as $locAttr)
      data_entry_helper::$javascript .= "        locList[j].template = templateReplace(locList[j].template, locList[j].id, ".$locAttr["attributeId"].", data, '".$locAttr["untranslatedCaption"]."');
";
    data_entry_helper::$javascript .= "        SiteLabelLayer.removeFeatures([locList[j].feature]);
        locList[j].feature.style.label = locList[j].template;
        SiteLabelLayer.addFeatures([locList[j].feature]);
        var myOption = jQuery(\"#".$options['mainFieldID']."\").find('option').filter('[value='+locList[j].id+']').empty();
".($args['SecondaryLocationTypeTerm']!='' ?
"        if(locList[j].feature.attributes.data.location_type_id == $primary)
          myOption.css('color','red');;
" : "")."        myOption.append(locList[j].template);
      }
    }});
";
    }
    data_entry_helper::$javascript .= "
}
getwkt = function(geometry, incFront, incBrackets){
  var retVal;
  retVal = '';
  switch(geometry.CLASS_NAME){
    case \"OpenLayers.Geometry.Point\":
      return((incFront!=false ? 'POINT' : '')+(incBrackets!=false ? '(' : '')+geometry.x+' '+geometry.y+(incBrackets!=false ? ')' : ''));
      break;
    case \"OpenLayers.Geometry.MultiPoint\":
      retVal = 'MULTIPOINT(';
      for(var i=0; i< geometry.components.length; i++)
        retVal += (i!=0 ? ',':'')+getwkt(geometry.components[i], false, true);
      retVal += ')';
      break;
    case \"OpenLayers.Geometry.LineString\":
      retVal = (incFront!=false ? 'LINESTRING' : '')+'(';
      for(var i=0; i< geometry.components.length; i++)
        retVal += (i!=0 ? ',':'')+getwkt(geometry.components[i], false, false);
      retVal += ')';
      break;
    case \"OpenLayers.Geometry.MultiLineString\":
      retVal = 'MULTILINESTRING(';
      for(var i=0; i< geometry.components.length; i++)
        retVal += (i!=0 ? ',':'')+getwkt(geometry.components[i], false, true);
      retVal += ')';
      break;
    case \"OpenLayers.Geometry.Polygon\": // only do outer ring
      retVal = (incFront!=false ? 'POLYGON' : '')+'((';
      for(var i=0; i< geometry.components[0].components.length; i++)
        retVal += (i!=0 ? ',':'')+getwkt(geometry.components[0].components[i], false, false);
      retVal += '))';
      break;
    case \"OpenLayers.Geometry.MultiPolygon\":
      retVal = 'MULTIPOLYGON(';
      for(var i=0; i< geometry.components.length; i++)
        retVal += (i!=0 ? ',':'')+getwkt(geometry.components[i], false, true);
      retVal += ')';
      break;
    case \"OpenLayers.Geometry.Collection\":
      retVal = 'GEOMETRYCOLLECTION(';
      for(var i=0; i< geometry.components.length; i++)
        retVal += (i!=0 ? ',':'')+getwkt(geometry.components[i], true, true);
      retVal += ')';
      break;
  }
  return retVal;
}
setGeomFields = function(){
  // use centre of Area as centroid
  // Build the combined Geometry, ignore label
  var geomstack = [];
  var completeGeom;
  var centreGeom;
  var mySiteNum;
  var allFeatures = SiteAreaLayer.features.concat(SitePathLayer.features,SitePointLayer.features);
  for(var i=allFeatures.length-1; i>=0; i--){
    if(allFeatures[i].attributes.highlighted == true){
      geomstack.push(allFeatures[i].geometry);
      mySiteNum = allFeatures[i].attributes.SiteNum;
    }
  }
  if(geomstack.length == 0){
".($args['locationMode']!='multi' ?
"    jQuery(\"#imp-boundary-geom\").val('');
    jQuery(\"#imp-geom\").val('');
    jQuery('#imp-sref').val('');
    jQuery('#imp-srefX').val('');
    jQuery('#imp-srefY').val('');
" : "").
"    return;
  } else if (geomstack.length == 1){
    completeGeom = geomstack[0];
  } else {
    completeGeom = new OpenLayers.Geometry.Collection(geomstack);
  }
  var boundaryWKT = getwkt(completeGeom, true, true);
  centreGeom=getCentroid(completeGeom);
  var centreWKT = getwkt(centreGeom, true, true);
".($args['locationMode']=='multi' ?
"  var highlighted = gethighlight();
  hook_multisite_setGeomFields(highlighted[0], boundaryWKT, centreWKT);
" :
"  jQuery(\"#imp-boundary-geom\").val(boundaryWKT);
  jQuery(\"#imp-geom\").val(centreWKT);
  setSref(centreGeom, 'TBC');  // forces the sref to be generated.
").
"}
setDrawnGeom = function() {
  // need to leave the location parent id enabled. Don't need to set geometries as we are using an existing location.
  setPermissionsNewSite();
  clearLocation();
".($creatorAttr ? "  jQuery('[name=locAttr:".$creatorAttr."],[name^=locAttr:".$creatorAttr.":]').val('".$user->name."');\n" : "").
"};
removeDrawnGeom = function(SiteNum){
  var highlighted=gethighlight();
  if(highlighted.length > 0 && highlighted[0].attributes.SiteNum == SiteNum) {
    unhighlightAll();
  }
  for(var i=SiteLabelLayer.features.length-1; i>=0; i--)
    if(SiteLabelLayer.features[i].attributes.new == true && SiteLabelLayer.features[i].attributes.SiteNum == SiteNum)
      SiteLabelLayer.destroyFeatures([SiteLabelLayer.features[i]]);
  for(var i=SiteAreaLayer.features.length-1; i>=0; i--)
    if(SiteAreaLayer.features[i].attributes.new == true && SiteAreaLayer.features[i].attributes.SiteNum == SiteNum)
      SiteAreaLayer.destroyFeatures([SiteAreaLayer.features[i]]);
  for(var i=SitePathLayer.features.length-1; i>=0; i--)
    if(SitePathLayer.features[i].attributes.new == true && SitePathLayer.features[i].attributes.SiteNum == SiteNum)
      SitePathLayer.destroyFeatures([SitePathLayer.features[i]]);
  for(var i=SitePointLayer.features.length-1; i>=0; i--)
    if(SitePointLayer.features[i].attributes.new == true && SitePointLayer.features[i].attributes.SiteNum == SiteNum)
      SitePointLayer.destroyFeatures([SitePointLayer.features[i]]);
  recalcNumSites();
}
resetVertices = function(){
  var allFeatures = SiteAreaLayer.features.concat(SitePathLayer.features,SitePointLayer.features);
  for(var i=allFeatures.length-1; i>=0; i--){
    if(typeof allFeatures[i].attributes.new == 'undefined'){ // not one of ours, so must be a vertex
      var layer= allFeatures[i].layer;
      layer.removeFeatures([allFeatures[i]]);
      allFeatures[i].style=dragPointStyleHash;
      layer.addFeatures([allFeatures[i]]);
    }
  }
  // Oddball case is single points: in this case they use the actual point to drag not a proxy vertex.
  if(modPointFeature.feature){
    if(modPointFeature.feature.geometry.CLASS_NAME == \"OpenLayers.Geometry.Point\") {
      var layer= modPointFeature.feature.layer;
      layer.removeFeatures([modPointFeature.feature]);
      modPointFeature.feature.style=dragPointStyleHash;
      layer.addFeatures([modPointFeature.feature]);
    }
  } else {
    for(var i=SitePointLayer.features.length-1; i>=0; i--){
      if(SitePointLayer.features[i].style != null){
        var feature = SitePointLayer.features[i];
        var layer = feature.layer;
        layer.removeFeatures([feature]);
        feature.style=null;
        layer.addFeatures([feature]);
      }
    }
  }
  SitePointLayer.redraw();
}
replaceGeom = function(feature, layer, modControl, geom, highlight, setFields){
  if(modControl.feature)
    modControl.unselectFeature(modControl.feature);
  var newfeature = new OpenLayers.Feature.Vector(geom, {});
  newfeature.attributes = feature.attributes;
  layer.destroyFeatures([feature]);
  layer.addFeatures([newfeature]);
  modControl.selectFeature(newfeature);
  selectFeature.highlight(newfeature);
  newfeature.attributes.highlighted=true;
  resetVertices();
  if(setFields) setGeomFields();
}
addAndSelectNewGeom = function(layer, modControl, geom, highlight){
  SiteNum++;
  var feature = new OpenLayers.Feature.Vector(geom, {highlighted: false, new: true, canEdit: true, SiteNum: SiteNum});
  layer.addFeatures([feature]);
  modControl.selectFeature(feature);
  feature.attributes.highlighted=true;
  selectFeature.highlight(feature);
  resetVertices();
  setGeomFields();
  recalcNumSites();
  return feature;
}
addToExistingFeatureSet = function(existingFeatures, layer, modControl, geom, highlight){
  var feature = new OpenLayers.Feature.Vector(geom, {});
  feature.attributes = existingFeatures[0].attributes;
  layer.addFeatures([feature]);
  modControl.selectFeature(feature);
  selectFeature.highlight(feature);
  feature.attributes.highlighted=true;
  resetVertices();
  setGeomFields();
}
unhighlightAll = function(){
  if(modAreaFeature.feature) modAreaFeature.unselectFeature(modAreaFeature.feature);
  if(modPathFeature.feature) modPathFeature.unselectFeature(modPathFeature.feature);
  if(modPointFeature.feature) modPointFeature.unselectFeature(modPointFeature.feature);
  var highlighted = gethighlight();
  for(var i=0; i<highlighted.length; i++) {
    highlighted[i].attributes.highlighted = false;
    selectFeature.unhighlight(highlighted[i]);
  }
  resetVertices();
}
highlightMe = function(id, SiteNum){
  var allFeatures = SiteAreaLayer.features.concat(SitePathLayer.features,SitePointLayer.features,SiteLabelLayer.features);
  for(var i=0; i<allFeatures.length; i++){
    if((typeof allFeatures[i].attributes.data != 'undefined' &&
          typeof allFeatures[i].attributes.data.id != 'undefined' &&
          allFeatures[i].attributes.data.id == id) || 
        (typeof allFeatures[i].attributes.SiteNum != 'undefined' &&
          allFeatures[i].attributes.SiteNum == SiteNum)){
      allFeatures[i].attributes.highlighted = true;
      selectFeature.highlight(allFeatures[i]);
    }
  }
}
gethighlight = function(){
  var allFeatures = SiteAreaLayer.features.concat(SitePathLayer.features,SitePointLayer.features,SiteLabelLayer.features);
  var features=[];
  for(var i=0; i<allFeatures.length; i++){
    if(allFeatures[i].attributes.highlighted==true){
      features.push(allFeatures[i]);
    }}
  return features;
}
// default is to add a dummy new empty label
if (typeof hook_new_site_added == 'undefined')
 hook_new_site_added = function(feature, SiteNum) {
  var centreGeom;
  var centrefeature;
  if(!feature){
    var div = jQuery('#map')[0];
    var mapCentre = div.map.getCenter();
    centreGeom = new OpenLayers.Geometry.Point(mapCentre.lon, mapCentre.lat);
  } else {
    centreGeom = getCentroid(feature.geometry);
  }
  centrefeature = new OpenLayers.Feature.Vector(centreGeom);
  centrefeature.attributes.new=true;
  centrefeature.attributes.highlighted=true;
  centrefeature.attributes.SiteNum=SiteNum;
  centrefeature.style = jQuery.extend({}, SiteListPrimaryLabelStyleHash);
  SiteLabelLayer.addFeatures([centrefeature]);
  SitePointLayer.redraw();
};
addDrawnPointToSelection = function(geometry) {
  // we assume that we have a point geometry.
".($args['locationMode']!='single' ?
"  if(ParentLocationLayer.features.length == 0) return;
  if(!ParentLocationLayer.features[0].geometry.intersects(geometry))
    alert(\"".lang::get('LANG_PointOutsideParent')."\");
" : "").
"  var highlightedFeatures = gethighlight();
".(isset($options['canCreate']) && $options['canCreate'] ? 
"  if(highlightedFeatures.length == 0){
    setDrawnGeom();
    // No currently selected feature. Create a new one.
    feature = addAndSelectNewGeom(SitePointLayer, modPointFeature, geometry, false);
    hook_new_site_added(feature, feature.attributes.SiteNum);
    if(typeof addPGPoint != 'undefined') addPGPoint(geometry);
    return true;
  }
" : 
"  if(highlightedFeatures.length == 0) return true;
")."
  var selectedFeature = false;
  // a site is already selected so the Drawn/Specified state stays unaltered
  if(highlightedFeatures[0].attributes.new == true){
    for(var i=0; i<SitePointLayer.features.length; i++){
      if(SitePointLayer.features[i].attributes.highlighted == true){
        selectedFeature = SitePointLayer.features[i];
        break;
      }}
    if(!selectedFeature) {
      addToExistingFeatureSet(highlightedFeatures, SitePointLayer, modPointFeature, geometry, false);
      if(typeof addPGPoint != 'undefined') addPGPoint(geometry);
      return true;
    }
  } else { // highlighted is existing
    if(highlightedFeatures[0].attributes.canEdit){
      for(var i=0; i<SitePointLayer.features.length; i++){
        if(SitePointLayer.features[i].attributes.highlighted == true){
          selectedFeature = SitePointLayer.features[i];
          break;
        }
      }
      if(!selectedFeature) {
        addToExistingFeatureSet(highlightedFeatures, SitePointLayer, modPointFeature, geometry, false);
        if(typeof addPGPoint != 'undefined') addPGPoint(geometry);
        return true;
      }
    } else {
      return true;
    }
  }
".($args['usePoints'] == 'single' ? "
  if(typeof clearPGrid != 'undefined') clearPGrid(geometry);
  replaceGeom(selectedFeature, SitePointLayer, modPointFeature, geometry, false, true);" : "
  if(typeof addPGPoint != 'undefined') addPGPoint(geometry);
  if(selectedFeature.geometry.CLASS_NAME == \"OpenLayers.Geometry.MultiPoint\") {
    modPointFeature.unselectFeature(selectedFeature);
    selectedFeature.geometry.addPoint(geometry);
    modPointFeature.selectFeature(selectedFeature);
    selectFeature.highlight(selectedFeature);
    selectedFeature.attributes.highlighted = true;
    resetVertices();
    setGeomFields();
  } else { // is OpenLayers.Geometry.Point
    var CompoundGeom = new OpenLayers.Geometry.MultiPoint([selectedFeature.geometry, geometry]);
    replaceGeom(selectedFeature, SitePointLayer, modPointFeature, CompoundGeom, false, true);
  }")."
  return true;
}
addDrawnLineToSelection = function(geometry) {
".($args['locationMode']!='single' ?
"  if(ParentLocationLayer.features.length == 0) return;
" : "").
"  var points = geometry.getVertices();
  if(points.length < 2){
    alert(\"".lang::get('LANG_TooFewLinePoints')."\");
    return false;
  }
".($args['locationMode']!='single' ?
"  var centre = getCentroid(geometry);
  if(!ParentLocationLayer.features[0].geometry.intersects(centre))
    alert(\"".lang::get('LANG_LineOutsideParent')."\");
" : "").
"  var highlightedFeatures = gethighlight();
".(isset($options['canCreate']) && $options['canCreate'] ? 
"  if(highlightedFeatures.length == 0){
    setDrawnGeom();
    // No currently selected feature. Create a new one.
    feature = addAndSelectNewGeom(SitePathLayer, modPathFeature, geometry, true);
    hook_new_site_added(feature, feature.attributes.SiteNum);
    return true;
  }
" : 
"  if(highlightedFeatures.length == 0) return true;
")."
  var selectedFeature = false;
  // a site is already selected so the Drawn/Specified state stays unaltered
  if(highlightedFeatures[0].attributes.new == true){
    for(var i=0; i<highlightedFeatures.length; i++){
      if(highlightedFeatures[i].geometry.CLASS_NAME == \"OpenLayers.Geometry.LineString\" ||
          highlightedFeatures[i].geometry.CLASS_NAME == \"OpenLayers.Geometry.MultiLineString\") {
        selectedFeature = highlightedFeatures[i];
        break;
      }}
    if(!selectedFeature) {
      addToExistingFeatureSet(highlightedFeatures, SitePathLayer, modPathFeature, geometry, true);
      return true;
    }
  } else { // highlighted is existing
    if(highlightedFeatures[0].attributes.canEdit){
      for(var i=0; i<highlightedFeatures.length; i++){
        if(highlightedFeatures[i].geometry.CLASS_NAME == \"OpenLayers.Geometry.LineString\" ||
            highlightedFeatures[i].geometry.CLASS_NAME == \"OpenLayers.Geometry.MultiLineString\") {
          selectedFeature = highlightedFeatures[i];
          break;
        }
      }
      if(!selectedFeature) {
        addToExistingFeatureSet(highlightedFeatures, SitePathLayer, modPathFeature, geometry, true);
        return true;
      }
    } else {
      return true;
    }
  }
  ".($args['useLines'] == 'single' ? "
  replaceGeom(selectedFeature, SitePathLayer, modPathFeature, geometry, true, true);" : "
  if(selectedFeature.geometry.CLASS_NAME == \"OpenLayers.Geometry.MultiLineString\") {
    modPathFeature.unselectFeature(selectedFeature);
    selectedFeature.geometry.addComponents([geometry]);
    modPathFeature.selectFeature(selectedFeature);
    selectFeature.highlight(selectedFeature);
    selectedFeature.attributes.highlighted = true;
    resetVertices();
    setGeomFields();
  } else { // is OpenLayers.Geometry.LineString
    var CompoundGeom = new OpenLayers.Geometry.MultiLineString([selectedFeature.geometry, geometry]);
    replaceGeom(selectedFeature, SitePathLayer, modPathFeature, CompoundGeom, true, true);
  }")."
  return true;
}
addDrawnPolygonToSelection = function(geometry) {
".($args['locationMode']!='single' ?
"  if(ParentLocationLayer.features.length == 0) return;
" : "").
"  var points = geometry.components[0].getVertices();
  if(points.length < 3){
    alert(\"".lang::get('LANG_TooFewPoints')."\");
    return false;
  }
".($args['locationMode']!='single' ?
"  var centre = getCentroid(geometry);
  if(!ParentLocationLayer.features[0].geometry.intersects(centre))
    alert(\"".lang::get('LANG_PolygonOutsideParent')."\");
" : "").
"  var highlightedFeatures = gethighlight();
".(isset($options['canCreate']) && $options['canCreate'] ? 
"  if(highlightedFeatures.length == 0){
    setDrawnGeom();
    // No currently selected feature. Create a new one.
    feature = addAndSelectNewGeom(SiteAreaLayer, modAreaFeature, geometry, true);
    hook_new_site_added(feature, feature.attributes.SiteNum);
    return true;
  }
" : 
"  if(highlightedFeatures.length == 0) return true;
")."
  var selectedFeature = false;
  // a site is already selected so the Drawn/Specified state stays unaltered
  if(highlightedFeatures[0].attributes.new == true){
    for(var i=0; i<highlightedFeatures.length; i++){
      if(highlightedFeatures[i].geometry.CLASS_NAME == \"OpenLayers.Geometry.Polygon\" ||
          highlightedFeatures[i].geometry.CLASS_NAME == \"OpenLayers.Geometry.MultiPolygon\") {
        selectedFeature = highlightedFeatures[i];
        break;
      }}
    if(!selectedFeature) {
      addToExistingFeatureSet(highlightedFeatures, SiteAreaLayer, modAreaFeature, geometry, true);
      return true;
    }
  } else { // highlighted is existing
    if(highlightedFeatures[0].attributes.canEdit){
      for(var i=0; i<highlightedFeatures.length; i++){
        if(highlightedFeatures[i].geometry.CLASS_NAME == \"OpenLayers.Geometry.Polygon\" ||
            highlightedFeatures[i].geometry.CLASS_NAME == \"OpenLayers.Geometry.MultiPolygon\") {
          selectedFeature = highlightedFeatures[i];
          break;
        }
      }
      if(!selectedFeature) {
        addToExistingFeatureSet(highlightedFeatures, SiteAreaLayer, modAreaFeature, geometry, true);
        return true;
      }
    } else {
      return true;
    }
  }
  ".($args['usePolygons'] == 'single' ? "
  replaceGeom(selectedFeature, SiteAreaLayer, modAreaFeature, geometry, true, true);" : "
  if(selectedFeature.geometry.CLASS_NAME == \"OpenLayers.Geometry.MultiPolygon\") {
    modAreaFeature.unselectFeature(selectedFeature);
    selectedFeature.geometry.addComponents([geometry]);
    modAreaFeature.selectFeature(selectedFeature);
    selectFeature.highlight(selectedFeature);
    selectedFeature.attributes.highlighted = true;
    resetVertices();
    setGeomFields();
  } else { // is OpenLayers.Geometry.Polygon
    var CompoundGeom = new OpenLayers.Geometry.MultiPolygon([selectedFeature.geometry, geometry]);
    replaceGeom(selectedFeature, SiteAreaLayer, modAreaFeature, CompoundGeom, true, true);
  }")."
  return true;
}
onFeatureModified = function(evt) {
  var feature = evt.feature;
  switch(feature.geometry.CLASS_NAME){
    case \"OpenLayers.Geometry.Point\":
".($args['locationMode']!='single' ?
"      if(!ParentLocationLayer.features[0].geometry.intersects(feature.geometry))
        alert(\"".lang::get('LANG_PointOutsideParent')."\");
" : "").
"      if(typeof modPGPoint != 'undefined') modPGPoint(feature.geometry);
      break;
    case \"OpenLayers.Geometry.MultiPoint\":
      if(feature.geometry.components.length == 0){
        modPointFeature.unselectFeature(feature);
        SitePointLayer.destroyFeatures([feature]);
      }
".($args['locationMode']!='single' ?
"      var centre = getCentroid(feature.geometry);
      if(!ParentLocationLayer.features[0].geometry.intersects(centre))
        alert(\"".lang::get('LANG_PointOutsideParent')."\");
" : "").
"      if(typeof modPGPoint != 'undefined') modPGPoint(feature.geometry);
      break;
    case \"OpenLayers.Geometry.LineString\":
      points = feature.geometry.getVertices();
      if(points.length < 2){
        alert(\"".lang::get('LANG_TooFewLinePoints')."\");
        modPathFeature.unselectFeature(feature);
        SitePathLayer.destroyFeatures([feature]);
      }
".($args['locationMode']!='single' ?
"      else {
        var centre = getCentroid(feature.geometry);
        if(!ParentLocationLayer.features[0].geometry.intersects(centre))
          alert(\"".lang::get('LANG_LineOutsideParent')."\");
      }
" : "").
"      break;
    case \"OpenLayers.Geometry.MultiLineString\":
      for(i=feature.geometry.components.length-1; i>=0; i--) {
        points = feature.geometry.components[i].getVertices();
        if(points.length < 2){
          alert(\"".lang::get('LANG_TooFewLinePoints')."\");
          var selectedFeature = modPathFeature.feature;
          modPathFeature.unselectFeature(selectedFeature);
          selectFeature.unhighlight(selectedFeature);
          SitePathLayer.removeFeatures([selectedFeature]);
          selectedFeature.geometry.removeComponents([feature.geometry.components[i]]);
          SitePathLayer.addFeatures([selectedFeature]);
          modPathFeature.selectFeature(selectedFeature);
          selectFeature.highlight(selectedFeature);
          selectedFeature.attributes.highlighted = true;
        }
      }
      if(feature.geometry.components.length == 0){
        modPathFeature.unselectFeature(feature);
        SitePathLayer.destroyFeatures([feature]);
      }
".($args['locationMode']!='single' ?
"      else {
        var centre = getCentroid(feature.geometry);
        if(!ParentLocationLayer.features[0].geometry.intersects(centre))
          alert(\"".lang::get('LANG_LineOutsideParent')."\");
      }
" : "").
"      break;
    case \"OpenLayers.Geometry.Polygon\": // only do outer ring
      points = feature.geometry.components[0].getVertices();
      if(points.length < 3){
        alert(\"".lang::get('LANG_TooFewPoints')."\");
        modAreaFeature.unselectFeature(feature);
        SiteAreaLayer.destroyFeatures([feature]);
      }
".($args['locationMode']!='single' ?
"      else {
        var centre = getCentroid(feature.geometry);
        if(!ParentLocationLayer.features[0].geometry.intersects(centre))
          alert(\"".lang::get('LANG_CentreOutsideParent')."\");
      }
" : "").
"      break;
    case \"OpenLayers.Geometry.MultiPolygon\":
      for(i=feature.geometry.components.length-1; i>=0; i--) {
        points = feature.geometry.components[i].components[0].getVertices();
        if(points.length < 3){
          alert(\"".lang::get('LANG_TooFewPoints')."\");
          var selectedFeature = modAreaFeature.feature;
          modAreaFeature.unselectFeature(selectedFeature);
          selectFeature.unhighlight(selectedFeature);
          SiteAreaLayer.removeFeatures([selectedFeature]);
          selectedFeature.geometry.removeComponents([feature.geometry.components[i]]);
          SiteAreaLayer.addFeatures([selectedFeature]);
          modAreaFeature.selectFeature(selectedFeature);
          selectFeature.highlight(selectedFeature);
          selectedFeature.attributes.highlighted = true;
        }
      }
      if(feature.geometry.components.length == 0){
        modAreaFeature.unselectFeature(feature);
        SiteAreaLayer.destroyFeatures([feature]);
      }
".($args['locationMode']!='single' ?
"      else {
        var centre = getCentroid(feature.geometry);
        if(!ParentLocationLayer.features[0].geometry.intersects(centre))
          alert(\"".lang::get('LANG_CentreOutsideParent')."\");
      }
" : "").
"      break;
  }
  resetVertices();
  setGeomFields();
}
// TBD should only include next when siteNameTermListID set
setNameDropDowns = function(disable, value){
  jQuery('#dummy-name').find('*').removeAttr('disabled');
  if(disable === true){
  	jQuery('#dummy-name').val('').attr('disabled','disabled');
  	return;
  }
  if(disable === false)
  	jQuery('#dummy-name').removeAttr('disabled');
  if(value===false && jQuery('#dummy-name').val() !== '') value=jQuery('#dummy-name').val()
  if(value !== '')
    jQuery('#dummy-name').find('option').filter('[value=]').attr('disabled','disabled');
  jQuery('#dummy-name').find('option').each(function (index, option){
  // TBD convert this to look at the features.
      if((value == false || jQuery(option).val() != value) &&
          jQuery('.cggrid-row,.cgAddedRow').find('.cggrid-name').filter('[value='+jQuery(option).val()+']').length > 0)
        jQuery(option).attr('disabled','disabled');
  });
  if(value!==false) jQuery('#dummy-name').val(value);
};
/********************************/
/* Define Map Control callbacks */
/********************************/
CancelSketch = function(layer){
  for(var i = editControl.controls.length-1; i>=0; i--)
    if(editControl.controls[i].CLASS_NAME == \"OpenLayers.Control.DrawFeature\" && editControl.controls[i].active)
      editControl.controls[i].cancel();
};
UndoSketchPoint = function(layer){
  for(var i = editControl.controls.length-1; i>=0; i--)
    if(editControl.controls[i].CLASS_NAME == \"OpenLayers.Control.DrawFeature\" && editControl.controls[i].active)
      editControl.controls[i].undo();
};
RemoveNewSite = function(){
  // can only remove the site if highlighted,
  var highlighted = gethighlight();
  if(highlighted.length == 0 || !highlighted[0].attributes.new) return;
  if(confirm('".lang::get('LANG_ConfirmRemoveDrawnSite')."')){
    if(typeof hook_RemoveNewSite != 'undefined')
      hook_RemoveNewSite();
    clearLocation();
    removeDrawnGeom(highlighted[0].attributes.SiteNum);
    recalcNumSites();
    setGeomFields();
    if(typeof setNameDropDowns != 'undefined')
      setNameDropDowns(true, false);
  }
};
StartNewSite = function(){
".($args['locationMode']=='multi' ?
"  unhighlightAll();
".(isset($args['siteNameTermListID']) && $args['siteNameTermListID'] != '' ?
"  setNameDropDowns(false, '');
" :
"  jQuery('#dummy-name').val('');
") : 
"  jQuery('#".$options['mainFieldID']."').val('').change();
").
"  setPermissionsNewSite();
  // No currently selected feature. Create a dummy label new one.
  SiteNum++;
  hook_new_site_added(false, SiteNum);
  for(var i=0; i<editControl.controls.length; i++){
    if(editControl.controls[i].CLASS_NAME == \"OpenLayers.Control.DrawFeature\"){
      selectFeature.deactivate();
      editControl.controls[i].activate();
      // new site will have no vertices yet...
      return;
    }}
}
ZoomToFeature = function(feature){
  var div = jQuery('#map')[0];
  var bounds=feature.geometry.bounds.clone();
  // extend the boundary to include a buffer, so the map does not zoom too tight.
  var dy = (bounds.top-bounds.bottom) * div.settings.maxZoomBuffer;
  var dx = (bounds.right-bounds.left) * div.settings.maxZoomBuffer;
  bounds.top = bounds.top + dy;
  bounds.bottom = bounds.bottom - dy;
  bounds.right = bounds.right + dx;
  bounds.left = bounds.left - dx;
  if (div.map.getZoomForExtent(bounds) > div.settings.maxZoom) {
    // if showing something small, don't zoom in too far
    div.map.setCenter(bounds.getCenterLonLat(), div.settings.maxZoom);
  } else {
    // Set the default view to show something triple the size of the grid square
    div.map.zoomToExtent(bounds);
  }
};
ZoomToSite = function(){
  var div = jQuery('#map')[0];
  if(modPointFeature.feature){
    return ZoomToFeature(modPointFeature.feature);}
  if(modPathFeature.feature){
    return ZoomToFeature(modPathFeature.feature);}
  if(modAreaFeature.feature){
    return ZoomToFeature(modAreaFeature.feature);}
  var highlighted = gethighlight();
  if(highlighted.length>0) return ZoomToFeature(highlighted[0]);
};
ZoomToParent = function(){
  if(ParentLocationLayer.features.length > 0) ParentLocationLayer.map.zoomToExtent(ParentLocationLayer.getDataExtent());
};
ZoomToCountry = function(){
	var div = jQuery('#map')[0];
	var center = new OpenLayers.LonLat(".$args['map_centroid_long'].",".$args['map_centroid_lat'].");
	center.transform(div.map.displayProjection, div.map.projection);
	div.map.setCenter(center, ".((int) $args['map_zoom']).");
}
/***********************************/
/* Define Controls for use on Map. */
/***********************************/
selectFeatureActivate = function(){
    if(modAreaFeature.feature) modAreaFeature.unselectFeature(modAreaFeature.feature);
    if(modPathFeature.feature) modPathFeature.unselectFeature(modPathFeature.feature);
    if(modPointFeature.feature) modPointFeature.unselectFeature(modPointFeature.feature);
    modAreaFeature.deactivate();
    modPathFeature.deactivate();
    modPointFeature.deactivate();
    resetVertices();
".($args['locationMode']!='single' ?
"    if(!ParentLocationLayer.features.length) {
      selectFeature.deactivate();
      return false;
    }
" : "").
"    return true;
};
polygonDrawActivate = function(){
  if(modPointFeature.feature) modPointFeature.unselectFeature(modPointFeature.feature);
  if(modPathFeature.feature) modPathFeature.unselectFeature(modPathFeature.feature);
  selectFeature.deactivate();
  modPointFeature.deactivate();
  modPathFeature.deactivate();
  resetVertices();
".($args['locationMode']!='single' ?
"  if(!ParentLocationLayer.features.length) {
    polygonDraw.deactivate();
    return false;
  }
" : "").
"  highlighted = gethighlight();
  if(highlighted.length == 0){
".(isset($options['canCreate']) && $options['canCreate'] ?
"    modAreaFeature.activate();
    return true;
  }
  if(highlighted[0].attributes.new == true){ // canCreate must be true for this
    modAreaFeature.activate();
    for(var i=0; i<SiteAreaLayer.features.length; i++){
      if(SiteAreaLayer.features[i].attributes.highlighted == true){
        modAreaFeature.selectFeature(SiteAreaLayer.features[i]);}}
    resetVertices();
    return true;
" : 
"    polygonDraw.deactivate();
    selectFeature.activate();
    return false;
")."  }
  // highlight feature is an existing one.
  if(highlighted[0].attributes.canEdit){
    modAreaFeature.activate();
    for(var i=0; i<SiteAreaLayer.features.length; i++){
      if(SiteAreaLayer.features[i].attributes.highlighted == true){
        modAreaFeature.selectFeature(SiteAreaLayer.features[i]);}}
    resetVertices();
    return true;
  }
  polygonDraw.deactivate();
  selectFeature.activate();
  return false;
};
lineDrawActivate = function(){
  if(modPointFeature.feature) modPointFeature.unselectFeature(modPointFeature.feature);
  if(modAreaFeature.feature) modAreaFeature.unselectFeature(modAreaFeature.feature);
  selectFeature.deactivate();
  modPointFeature.deactivate();
  modAreaFeature.deactivate();
  resetVertices();
".($args['locationMode']!='single' ?
"  if(!ParentLocationLayer.features.length) {
    lineDraw.deactivate();
    return false;
  }
" : "").
"  highlighted = gethighlight();
  if(highlighted.length == 0){
".(isset($options['canCreate']) && $options['canCreate'] ?
"    modPathFeature.activate();
    return true;
  }
  if(highlighted[0].attributes.new == true){ // canCreate must be true for this
    modPathFeature.activate();
    for(var i=0; i<SitePathLayer.features.length; i++){
      if(SitePathLayer.features[i].attributes.highlighted == true){
        modPathFeature.selectFeature(SitePathLayer.features[i]);}}
    resetVertices();
    return true;
" : 
"    lineDraw.deactivate();
    selectFeature.activate();
    return false;
")."  }
  // highlight feature is an existing one.
  if(highlighted[0].attributes.canEdit){
    modPathFeature.activate();
    for(var i=0; i<SitePathLayer.features.length; i++){
      if(SitePathLayer.features[i].attributes.highlighted == true){
        modPathFeature.selectFeature(SitePathLayer.features[i]);}}
    resetVertices();
    return true;
  }
  lineDraw.deactivate();
  selectFeature.activate();
  return false;
};
pointDrawDeactivate = function(){
  if(typeof removePopups != 'undefined') removePopups();
  jQuery(\"#pointgrid\").hide();
};
pointDrawActivate = function(){
  jQuery(\"#pointgrid\").show();
  if(modAreaFeature.feature) modAreaFeature.unselectFeature(modAreaFeature.feature);
  if(modPathFeature.feature) modPathFeature.unselectFeature(modPathFeature.feature);
  selectFeature.deactivate();
  modAreaFeature.deactivate();
  modPathFeature.deactivate();
  resetVertices();
".($args['locationMode']!='single' ?
"  if(!ParentLocationLayer.features.length) {
    pointDraw.deactivate();
    return false;
  }
" : "").
"  highlighted = gethighlight();
  if(highlighted.length == 0){
".(isset($options['canCreate']) && $options['canCreate'] ?
"    modPointFeature.activate();
    return true;
  }
  if(highlighted[0].attributes.new == true){ // canCreate must be true for this
    modPointFeature.activate();
    for(var i=0; i<SitePointLayer.features.length; i++){
      if(SitePointLayer.features[i].attributes.highlighted == true){
        modPointFeature.selectFeature(SitePointLayer.features[i]);
        resetVertices();}}
    if(typeof populatePGrid != 'undefined') populatePGrid();
    return true;
" : 
"    pointDraw.deactivate();
    selectFeature.activate();
    return false;
")."  }
  // highlight feature is an existing one.
  if(highlighted[0].attributes.canEdit){
    modPointFeature.activate();
    for(var i=0; i<SitePointLayer.features.length; i++){
      if(SitePointLayer.features[i].attributes.highlighted == true){
        modPointFeature.selectFeature(SitePointLayer.features[i]);
        resetVertices();}}
    if(typeof populatePGrid != 'undefined') populatePGrid();
    return true;
  }
  pointDraw.deactivate();
  selectFeature.activate();
  return false;
};
MyEditingToolbar=OpenLayers.Class(
		OpenLayers.Control.Panel,{
			initialize:function(layer,options){
				OpenLayers.Control.Panel.prototype.initialize.apply(this,[options]);
				this.addControls([selectFeature
".($args['usePolygons'] != 'none' ? "				         ,polygonDraw
" : '').
($args['useLines'] != 'none' ? "				         ,lineDraw
" : '').
($args['usePoints'] != 'none' ? "				         ,pointDraw
" : '').
(($args['usePolygons'] != 'none' || $args['useLines'] != 'none') ? "				         ,new OpenLayers.Control.Button({displayClass: \"olControlCancelSketch\", trigger: CancelSketch, title: '".lang::get('LANG_CancelSketchTooltip')."'})
				         ,new OpenLayers.Control.Button({displayClass: \"olControlUndoSketchPoint\", trigger: UndoSketchPoint, title: '".lang::get('LANG_UndoSketchPointTooltip')."'})
" : '').
(isset($options['canCreate']) && $options['canCreate'] ? "				         ,new OpenLayers.Control.Button({displayClass: \"olControlRemoveNewSite\", trigger: RemoveNewSite, title: '".lang::get('LANG_RemoveNewSite')."'})
				         ,new OpenLayers.Control.Button({displayClass: \"olControlStartNewSite\", trigger: StartNewSite, title: '".lang::get('LANG_StartNewSite')."'})
" : '').
"				         ,new OpenLayers.Control.Button({displayClass: \"olControlZoomToSite\", trigger: ZoomToSite, title: '".lang::get('LANG_ZoomToSite')."'})
".($args['locationMode'] != 'single' ? "				         ,new OpenLayers.Control.Button({displayClass: \"olControlZoomToSquare\", trigger: ZoomToParent, title: '".lang::get('LANG_ZoomToParent')."'})
" : '').
"				         ,new OpenLayers.Control.Button({displayClass: \"olControlZoomToCountry\", trigger: ZoomToCountry, title: '".lang::get('LANG_ZoomToCountry')."'})
				         ]);
	},
	CLASS_NAME:\"MyEditingToolbar\"});
deactivateControls = function(){
  if(typeof editControl != 'undefined'){
    for(var i = editControl.controls.length-1; i>=0; i--){
      if(editControl.controls[i].CLASS_NAME == \"OpenLayers.Control.DrawFeature\" ||
         editControl.controls[i].CLASS_NAME == \"OpenLayers.Control.SelectFeature\") {
        editControl.controls[i].deactivate();
    }}}
};
setSpecifiedLocation = function() {
  var highlighted = gethighlight();
  if(highlighted[0].attributes.canEdit){
    setPermissionsOldEditableSite(false);
  } else {
    // need to leave the location parent id enabled. Don't need to set geometries as we are using an existing location.
    setPermissionsOldReadOnlySite();
  }
}
onFeatureSelect = function(evt) {
  var feature = evt.feature;
  if(feature.attributes.highlighted==true) return false;
".($args['locationMode']=='multi' ?
"  unhighlightAll();
" :
"  var willRemove = false;
  var allFeatures = SiteAreaLayer.features.concat(SitePathLayer.features,SitePointLayer.features);
  for(var i=0; i<allFeatures.length; i++){
    if(allFeatures[i].attributes.new==true) willRemove=true;
  }
  if(willRemove && !confirm('".lang::get('LANG_ConfirmRemoveDrawnSite')."')) return false;
  var highlighted = gethighlight();
  if(highlighted.length > 0 && highlighted[0].attributes.new)
    removeDrawnGeom(highlighted[0].attributes.SiteNum);
  else
    // Any highlighted existing features should be unhighlighted.
    unhighlightAll();
  jQuery(\"#".$options['mainFieldID'].",#sample-location-id\").val(feature.attributes.data.id);
").
"  ZoomToFeature(feature);
  // now highlight the new ones
  highlightMe(false, feature.attributes.SiteNum); // need to fetch SiteNum in case highlight new.
  loadLocation(feature);
  return false;
}
modAreaFeature = new OpenLayers.Control.ModifyFeature(SiteAreaLayer,{standalone: true});
modPathFeature = new OpenLayers.Control.ModifyFeature(SitePathLayer,{standalone: true});
modPointFeature = new OpenLayers.Control.ModifyFeature(SitePointLayer,{standalone: true});
selectFeature = new OpenLayers.Control.SelectFeature([SiteAreaLayer,SitePathLayer,SitePointLayer,SiteLabelLayer],{'displayClass':'olControlSelectFeature', title: '".lang::get('LANG_SelectTooltip')."'});
selectFeature.events.on({'activate': selectFeatureActivate});
polygonDraw = new OpenLayers.Control.DrawFeature(SiteAreaLayer,OpenLayers.Handler.Polygon,{'displayClass':'olControlDrawFeaturePolygon', drawFeature: addDrawnPolygonToSelection, title: '".lang::get('LANG_PolygonTooltip')."'});
polygonDraw.events.on({'activate': polygonDrawActivate});
lineDraw = new OpenLayers.Control.DrawFeature(SitePathLayer,OpenLayers.Handler.Path,{'displayClass':'olControlDrawFeaturePath', drawFeature: addDrawnLineToSelection, title: '".lang::get('LANG_LineTooltip')."'});
lineDraw.events.on({'activate': lineDrawActivate});
pointDraw = new OpenLayers.Control.DrawFeature(SitePointLayer,OpenLayers.Handler.Point,{'displayClass':'olControlDrawFeaturePoint', drawFeature: addDrawnPointToSelection, title: '".lang::get('LANG_PointTooltip')."'});
pointDraw.events.on({'activate': pointDrawActivate, 'deactivate': pointDrawDeactivate});
editControl = new MyEditingToolbar(SiteAreaLayer, {allowDepress: false, 'displayClass':'olControlEditingToolbar'});
mapInitialisationHooks.push(function(mapdiv) {
	mapdiv.map.addControl(modAreaFeature);
	mapdiv.map.addControl(modPathFeature);
	mapdiv.map.addControl(modPointFeature);
	modAreaFeature.deactivate();
	modPathFeature.deactivate();
	modPointFeature.deactivate();
	mapdiv.map.addControl(editControl);
    editControl.activate();
  	if(SiteAreaLayer.map.editLayer){
		SiteAreaLayer.map.editLayer.clickControl.deactivate();
		SiteAreaLayer.map.editLayer.destroyFeatures();
	}
	mapdiv.map.events.on({'zoomend': function(){
	  if(jQuery('#map')[0].map.zoom >= ".$args['labelZoomLevel']."){
	    if(!SiteLabelLayer.getVisibility())
	      SiteLabelLayer.setVisibility(true);
	  } else {
	    if(SiteLabelLayer.getVisibility())
	      SiteLabelLayer.setVisibility(false);
	  }
	}});
	mapdiv.map.events.triggerEvent('zoomend');
";
	// If entity to load is set, then we are highlighting an existing location, can't modify, but can start drawing another site.
    if(isset(data_entry_helper::$entity_to_load['location:id'])){
      switch($args['locationMode']){
        // TBD fieldname should be parentFieldName
        case 'multi':
    		data_entry_helper::$javascript .= "	loadFeatures(".data_entry_helper::$entity_to_load['sample:location_id'].",'',{initial: true}, true, true);\n";
    		break;
    	case 'single':
    		data_entry_helper::$javascript .= "	loadFeatures('',".data_entry_helper::$entity_to_load['location:id'].",{initial: true}, false, false);\n";
      		break;
    	default: // mode = parent
      		data_entry_helper::$javascript .= "	loadFeatures(".data_entry_helper::$entity_to_load['location:parent_id'].",".data_entry_helper::$entity_to_load['location:id'].",{initial: true}, true, true);\n"; 
      }
    } else if($args['locationMode']=='single'){
      data_entry_helper::$javascript .= "	loadFeatures('','',{initial: true}, false, false);\n";
    } else { // either multi or parent with non specified at the moment.
      data_entry_helper::$javascript .= "	setPermissionsNoParent();\n";
    }
    data_entry_helper::$javascript .= "});
SiteLabelLayer.events.on({
    'beforefeatureselected': onFeatureSelect
  });
SiteAreaLayer.events.on({
    'beforefeatureselected': onFeatureSelect
    ,'featuremodified': onFeatureModified
  });
SitePathLayer.events.on({
    'beforefeatureselected': onFeatureSelect
    ,'featuremodified': onFeatureModified
  });
SitePointLayer.events.on({
    'beforefeatureselected': onFeatureSelect
    ,'featuremodified': onFeatureModified
  });
";
    if($args['locationMode']!='multi')
      data_entry_helper::$javascript .= "
hook_ChildFeatureLoad = function(feature, data, child_id, childArgs){
  if(child_id == '' || data.id != child_id){
    return;
  }
  var pointFeature = false;
  var lineFeature = false;
  var areaFeature = false;
  if(typeof(feature)=='object'&&(feature instanceof Array)){
    for(var j=0; j< feature.length; j++){
      switch(feature[j].geometry.CLASS_NAME){
        case \"OpenLayers.Geometry.Point\":
        case \"OpenLayers.Geometry.MultiPoint\":
          pointFeature = feature[j];
          break;
        case \"OpenLayers.Geometry.LineString\":
        case \"OpenLayers.Geometry.MultiLineString\":
          lineFeature = feature[j];
          break;
        default:
          areaFeature = feature[j];
          break;
      }
    }
  } else {
    switch(feature.geometry.CLASS_NAME){
      case \"OpenLayers.Geometry.Point\":
      case \"OpenLayers.Geometry.MultiPoint\":
        pointFeature = feature;
        break;
      case \"OpenLayers.Geometry.LineString\":
      case \"OpenLayers.Geometry.MultiLineString\":
        lineFeature = feature;
        break;
      default:
        areaFeature = feature;
      break;
    }
  }
  var Zoomed=false;
  if(areaFeature) {
    areaFeature.attributes.highlighted=true;
    selectFeature.highlight(areaFeature);
    ZoomToFeature(areaFeature);
    Zoomed=true;
  }
  if(lineFeature) {
    lineFeature.attributes.highlighted=true;
    selectFeature.highlight(lineFeature);
    if(!Zoomed) ZoomToFeature(lineFeature);
    Zoomed=true;
  }
  if(pointFeature) {
    pointFeature.attributes.highlighted=true;
    selectFeature.highlight(pointFeature);
    if(!Zoomed) ZoomToFeature(pointFeature);
  }
//  setGeomFields();
};
jQuery('#location-name').change(function(){
  for(var i=0; i< SiteLabelLayer.features.length; i++){
    if(SiteLabelLayer.features[i].attributes.new == false){
      if(jQuery(this).val() == SiteLabelLayer.features[i].attributes.data.name){
        alert(\"".lang::get('LANG_DuplicateName')."\");
      }
    }
  }
  jQuery('#sample-location-name').val(jQuery(this).val());
});
jQuery('#location-id').change(function(){
  jQuery('#sample-location-id').val(jQuery(this).val());
  });
//  jQuery(\"#location-name\").val('');
// In order to change this value, there must be a list of values: therefore the parent has been filled in
// With a parent filled in, there are 3 states
// If nothing is selected, then the mod control allows selection of an existing feature, or the draw controls allow the creation of a new site.
// With a new site in progress, then the mod control allows modification of the new site or selection of an existing feature, or the draw controls allow the additional of elements to the new site.
// With a existing site selected, then the mod control allows selection of a different existing feature, or the draw controls allow the creation of a new site.
// the state of the mod and draw controls re enabling stays the same before and afterwards.
jQuery('#".$options['mainFieldID']."').change(function(){
  // this is only used when not multisite.
  var highlighted = gethighlight();
  var found=false;
  // only confirm if have something drawn on map: ie ignore label
  for(i=0; i<highlighted.length; i++){
    if(highlighted[i].layer != SiteLabelLayer && highlighted[i].attributes.new==true)
      found=true;
  }
  if(found){
    if(!confirm('".lang::get('LANG_ConfirmRemoveDrawnSite')."')) return false;
  }
  if(highlighted.length>0 && highlighted[0].attributes.new==true){
    removeDrawnGeom(highlighted[0].attributes.SiteNum);
  }
  jQuery('#sample-location-id').val(jQuery(this).val());
  unhighlightAll();
  pointDraw.deactivate();
  lineDraw.deactivate();
  polygonDraw.deactivate();
  selectFeature.activate();
  setPermissionsNoSite();
  if(jQuery(this).val()=='') {
    clearLocation();
    return;
  }
  // at this point we have selected an existing site.
  highlightMe(jQuery(this).val(), false);
  ZoomToSite();
  var allFeatures = SiteAreaLayer.features.concat(SitePathLayer.features,SitePointLayer.features);
  for(var i=0; i<allFeatures.length; i++){
    if(typeof allFeatures[i].attributes.data != 'undefined' &&
        typeof allFeatures[i].attributes.data.id != 'undefined' &&
        allFeatures[i].attributes.data.id == jQuery(this).val()){
      loadLocation(allFeatures[i]); // sets permissions.
      return;
    }
  }
  clearLocation();
});
";
    $retVal .= "<input type=\"hidden\" id=\"imp-sref-system\" name=\"location:centroid_sref_system\" value=\"2169\" >";
    if($args['locationMode']=='multi' && isset(data_entry_helper::$entity_to_load["sample:updated_by_id"])){ // only set if data loaded from db, not error condition
      iform_mnhnl_set_editable($auth, $args, $node, array(), !(isset($options['canCreate']) && $options['canCreate']));
      // multiple site: parent sample points to parent location in location_id, not parent_id. Each site has own subsample.
      // can not change the (parent) location of the main sample, as this will reset all the attached samples and sites, so redering entered data useless. Just delete.
      return $retVal."\n<input type=\"hidden\" name =\"sample:location_id\" value=\"".data_entry_helper::$entity_to_load["sample:location_id"]."\" >
  <p>".$options['parentFieldLabel'].' : '.data_entry_helper::$entity_to_load["location:name"].'</p>
'.($args['includeNumSites'] ? "<label for=\"dummy-num-sites\" class=\"auto-width\">".lang::get('LANG_NumSites')." : </label><input id=\"dummy-num-sites\" name=\"dummy:num-sites\" class=\"checkNumSites narrow\" readonly=\"readonly\"><br />\n" : '').
"<p>".$options['Instructions2']."</p>\n".
        ($args['siteNameTermListID']== '' ? "<label for=\"dummy-name\">".$options['NameLabel']." : </label><input id=\"dummy-name\" name=\"dummy:name\" class='wide required'><br />\n" :
          data_entry_helper::select(array(
            'label'=>$options['NameLabel'],
            'id'=>'dummy-name',
            'fieldname'=>'dummy:name',
            'table'=>'termlists_term',
            'captionField'=>'term',
            'valueField'=>'term',
            'blankText'=>'',
            'class'=>'checkGrid',
            'extraParams' => $auth['read'] + array('termlist_id'=>$args['siteNameTermListID'], 'orderby'=>'id'))));
    }
    $retVal .= "<input type='hidden' id=\"sample-location-name\" name=\"sample:location_name\" value='".data_entry_helper::$entity_to_load['sample:location_name']."' />";
    $locations = iform_loctools_listlocations($node);
    if($args['locationMode'] == 'parent' || $args['locationMode'] == 'multi'){
      if (!isset($args['loctoolsLocTypeID'])) return "locationMode == parent, loctoolsLocTypeID not set.";
      iform_mnhnl_set_editable($auth, $args, $node, array(), !(isset($options['canCreate']) && $options['canCreate']));
      $locOptions = array('validation' => array('required'),
    					'label'=>$options['parentFieldLabel'],
    					'id'=>$options['parentFieldID'],
    					'table'=>'location',
    					'fieldname'=>$options['parentFieldName'],
    					'valueField'=>'id',
    					'captionField'=>'name',
    					'template' => 'select',
    					'itemTemplate' => 'select_item',
    					'extraParams'=>array_merge($auth['read'],
    						array('parent_id'=>'NULL',
    								'view'=>'detail',
    								'orderby'=>'name',
    								'location_type_id'=>$args['loctoolsLocTypeID'],
    								'deleted'=>'f')));
      $response = data_entry_helper::get_population_data($locOptions);
      if (isset($response['error'])) return "PARENT LOOKUP ERROR:  ".$response['error'];
      $opts .= str_replace(array('{value}', '{caption}', '{selected}'),
                         array('', htmlentities(lang::get('LANG_CommonParentBlank')), ''),
                         $indicia_templates[$locOptions['itemTemplate']]);
      foreach ($response as $record) {
        $include=false;
        if($locations == 'all') $include = true;
        else if(in_array($record["id"], $locations)) $include = true;
        if($include == true){
          $opts .= str_replace(array('{value}', '{caption}', '{selected}'),
                             array($record[$locOptions['valueField']],
                                   htmlentities($record[$locOptions['captionField']]),
                                   isset(data_entry_helper::$entity_to_load[$options['parentFieldName']]) ? (data_entry_helper::$entity_to_load[$options['parentFieldName']] == $record[$locOptions['valueField']] ? 'selected=selected' : '') : ''),
                             $indicia_templates[$locOptions['itemTemplate']]);
        }
      }
      $locOptions['items'] = $opts;
      $retVal .= '<p>'.$options['Instructions1'].'</p>'.
        data_entry_helper::apply_template($locOptions['template'], $locOptions).
        ($args['includeNumSites'] ? '<label for="dummy-num-sites" class=\"auto-width\">'.lang::get('LANG_NumSites').' : </label><input id="dummy-num-sites" name="dummy:num-sites" class="checkNumSites narrow" readonly="readonly"><br />
' : '').'<p>'.$options['Instructions2'].'</p>';
      if($args['locationMode']=='parent'){
        // choose a single site from a parent, so built site selector drop down.
        // parent uses ID locModTool
        $opts = "";
        $locOptions = array('label'=>$options['mainFieldLabel'],
    					'id'=>$options['mainFieldID'],
    					'table'=>'location',
    					'fieldname'=>$options['mainFieldName'], // 'sample:location_id'
    					'valueField'=>'id',
    					'captionField'=>'name',
    					'template' => 'select',
    					'itemTemplate' => 'select_item',
    					'extraParams'=>array_merge($auth['read'],
    						array('parent_id'=>data_entry_helper::$entity_to_load["location:parent_id"],
    								'view'=>'detail',
    								'orderby'=>'name',
    								'location_type_id'=>$loctypeParam,
    								'deleted'=>'f')));
        if(isset(data_entry_helper::$entity_to_load["sample:id"])){ // if preloaded, then drop down is dependant on value in parent field: if not then get user to enter parent first
          $response = data_entry_helper::get_population_data($locOptions);
           if (isset($response['error'])) return "CHILD LOOKUP ERROR:  ".$response['error'];
          $opts .= str_replace(array('{value}', '{caption}', '{selected}'),
                         array('', htmlentities(lang::get('LANG_CommonEmptyLocationID')), ''),
                         $indicia_templates[$locOptions['itemTemplate']]);
          foreach ($response as $record) {
            $caption = htmlspecialchars($record[$locOptions['captionField']]); // it will be extended using a attribute template by JS
            $opts .= str_replace(array('{value}', '{caption}', '{selected}'),
                               array($record[$locOptions['valueField']], htmlentities($caption),
                                     isset(data_entry_helper::$entity_to_load['location:id']) ? (data_entry_helper::$entity_to_load['sample:location_id'] == $record[$locOptions['valueField']] ? 'selected=selected' : '') : ''),
                               $indicia_templates[$locOptions['itemTemplate']]);
          }
        } else {
          $opts = "<option >".lang::get("LANG_CommonChooseParentFirst")."</option>";
        }
        $locOptions['items'] = $opts;
        // single site requires all location data in main form. Mult site must have array: depends on implementation so left to actual form.
        $retVal .= data_entry_helper::apply_template($locOptions['template'], $locOptions)."<br />";
        if($args['siteNameTermListID']== '') {
          $retVal .= "<label for=\"location-name\">".$options['NameLabel']." : </label><input type='text' id=\"location-name\" name=\"location:name\" class='required wide' value='".data_entry_helper::$entity_to_load['location:name']."' /><span class='deh-required'>*</span><br/>";
        } else {
          $retVal .= data_entry_helper::select(array(
            'label'=>$options['NameLabel'], 
            'id'=>'location-name',
            'fieldname'=>'location:name',
            'table'=>'termlists_term',
            'captionField'=>'term',
            'valueField'=>'term',
            'extraParams' => $auth['read'] + array('termlist_id'=>$args['siteNameTermListID'], 'orderby'=>'id')
          ));
        }
        $retVal .= "<input type='hidden' id=\"sample-location-id\" name=\"sample:location_id\" value='".data_entry_helper::$entity_to_load['sample:location_id']."' />";
        data_entry_helper::$javascript .= "
jQuery(\"#".$options['parentFieldID']."\").change(function(){
  jQuery(\"#imp-geom,#imp-boundary-geom,#imp-sref,#imp-srefX,#imp-srefY\").val('');
  jQuery(\"#".$options['mainFieldID'].",#sample-location-id,#location-name,#sample-location-name\").val('');
  jQuery(\"#location_location_type_id\").val('$primary');
  loadFeatures(this.value, '', {initial: false}, true, true);
});
";
      } else {
      	// multiSite needs the location name.
        if($args['siteNameTermListID']== '') {
          $retVal .= "<label for=\"dummy-name\">".$options['NameLabel']." : </label><input type='text' id=\"dummy-name\" name=\"dummy:name\" class='wide' value='".data_entry_helper::$entity_to_load['location:name']."' /><span class='deh-required'>*</span><br/>";
        } else {
          $retVal .= data_entry_helper::select(array(
            'label'=>$options['NameLabel'], 
            'id'=>'dummy-name',
            'fieldname'=>'dummy:name',
            'table'=>'termlists_term',
            'captionField'=>'term',
            'valueField'=>'term',
            'blankText'=>'',
            'class'=>'checkGrid',
            'extraParams' => $auth['read'] + array('termlist_id'=>$args['siteNameTermListID'], 'orderby'=>'id')
          ));
        }
      	data_entry_helper::$javascript .= "
jQuery(\"#".$options['parentFieldID']."\").change(function(){
  if(typeof hook_mnhnl_parent_changed != 'undefined')
    hook_mnhnl_parent_changed();
  loadFeatures(this.value, '', {initial : false}, true, true);
});
";
      }
    } else { // no parent look up: implies no drop down select for names.
      $location_list_args=array(
          'nocache'=>true,
          'includeCodeField'=>true,
          'label'=>lang::get('LANG_CommonLocationNameLabel'),
          'NameBlankText'=>lang::get('LANG_Location_Name_Blank_Text'),
          'fieldname'=>'location:id',
          'id'=>$options['mainFieldID'],
          'extraParams'=>array_merge(array(
              'view'=>'detail',
              'orderby'=>'name',
              'website_id'=>$args['website_id'],
              'location_type_id'=>$loctypeParam),
            $auth['read']),
          'table'=>'location',
          'template' => 'select',
          'itemTemplate' => 'select_item',
          'filterField'=>'parent_id',
          'size'=>3);
      // Idea here is to get a list of all locations in order to build drop downs.
      $responseRecords = data_entry_helper::get_population_data($location_list_args);
      if (isset($responseRecords['error'])) return $responseRecords['error'];
      iform_mnhnl_set_editable($auth, $args, $node, $responseRecords, 'conditional');
      $attributeRecords = array(array());
      $attribute_list_args=array(
        'nocache'=>true,
        'view'=>'list',
        'extraParams'=>array_merge(array('orderby'=>'name', 'website_id'=>$args['website_id']), $auth['read']),
        'table'=>'location_attribute_value');
      // all the templating will be done now as no dynamic filling of the field. extendLocationNameTemplate
      $attributeResponse = data_entry_helper::get_population_data($attribute_list_args);
      foreach ($attributeResponse as $attrRecord)
        $attributeRecords[$attrRecord['location_id']][$attrRecord['location_attribute_id']] = $attrRecord;
      $NameOpts = '';
      foreach ($responseRecords as $record){
        if($record['name']!=''){
 //         $template = str_replace('{name}', $record['name'], $args['extendLocationNameTemplate'] ? $args['extendLocationNameTemplate'] : '{name}');
 //         $template = str_replace('{code}', $record['code'], $template);
 //         if(isset($attributeRecords[$record['id']]))
 //           foreach ($attributeRecords[$record['id']] as $locAttrID => $attrRecord){
 //             $template = str_replace('{'.$attrRecord["caption"].'}', $attrRecord['value'], $template);
 //           }
          $item = array('selected' => (data_entry_helper::$entity_to_load['location:id'] == $record['id'] ? 'selected=\"selected\"' : ''),
                      'value' => $record['id'],
                      'caption' => htmlspecialchars(utf8_decode($record['name'])));
          $NameOpts .= data_entry_helper::mergeParamsIntoTemplate($item, $location_list_args['itemTemplate']);
        }
      }
      $retVal .= '<p>'.$options['Instructions2'].'</p><fieldset><legend>'.lang::get('Existing locations').'</legend>';
      if($NameOpts != ''){
//        $location_list_args['label']=$location_list_args['NameLabel'];
//        $location_list_args['fieldname']=$location_list_args['NameFieldName'];
//        $location_list_args['id']=$location_list_args['NameID'];
        $location_list_args['items'] = str_replace(array('{value}', '{caption}', '{selected}'),
          array('', htmlentities($location_list_args['NameBlankText']), ''),
          $indicia_templates[$location_list_args['itemTemplate']]).$NameOpts;
        $retVal .= data_entry_helper::apply_template($location_list_args['template'], $location_list_args);
      } else
        $retVal .= '<p>'.lang::get("LANG_NoSites").'</p>';
      
      $retVal .= "</fieldset><label for=\"location-name\">".$options['NameLabel']." : </label> <input id=\"location-name\" name=\"location:name\" class='wide required' value='".data_entry_helper::$entity_to_load['location:name']."'><span class=\"deh-required\">*</span><br />
      <input type='hidden' id=\"sample-location-id\" name=\"sample:location_id\" value='".data_entry_helper::$entity_to_load['sample:location_id']."' />";
    }
    if(isset($args['includeLocationCode']) && $args['includeLocationCode'])
      $retVal .= "<label for=\"location-code\">".$options['CodeLabel']." : </label> <input id=\"location-code\" name=\"location:code\" value='".data_entry_helper::$entity_to_load['location:code']."'><br />";
    return $retVal;
}

function iform_mnhnl_PointGrid($auth, $args, $options) {
  if($args['usePoints']=='single' && $args['useLines']=='none' && $args['usePolygons']=='none'){
    return "";
  }
  data_entry_helper::$javascript .= "
// functions for iform_mnhnl_PointGrid
jQuery('#pointgrid').hide();
";
  $retVal="<fieldset id=\"pointgrid\">\n<legend>".lang::get('LANG_PointsLegend')."</legend>";
  $retVal.="<table ><tbody id=\"pointgridtable\"><tr class=\"pgAddRow\">
  <td><label class=\"auto-width X\" >".lang::get('LANG_Grid_X_Label')." :</label><input type=\"text\" id=\"new-srefX\" name=\"new:srefX\" value=\"\" /></td>
  <td><label class=\"auto-width Y\" >".lang::get('LANG_Grid_Y_Label')." :</label><input type=\"text\" id=\"new-srefY\" name=\"new:srefY\" value=\"\" /></td>";
  $systemCtrl="<td style=\"display: none;\"><input class=\"pgSrefSystem\" value=\"2169\"></td>"; //TBD should come from $arg
  if(isset($options['srefs'])){
    $systemCtrl="<td><select class=\"pgSrefSystem\" >";
    $srefs = explode(';',$options['srefs']);
    data_entry_helper::$javascript .= "
setMySref = function(myRow){
  jQuery.getJSON(\"".data_entry_helper::$base_url."/index.php/services/spatial/wkt_to_sref?wkt=\"+myRow.data('WKT')+\"&system=\"+myRow.data('system')+\"&output=\"+myRow.data('output')+\"&precision=8&callback=?\",
      function(data){
        if(typeof data.error != 'undefined')
          alert(data.error);
        else {
          var parts=data.sref.split(' ');
          parts[0]=parts[0].split(',')[0]; // part 1 may have a comma at the end, so remove
          myRow.find('[name=pg\\:srefX]').val(parts[0]);
          myRow.find('[name=pg\\:srefY]').val(parts[1]);
        }
      });
}
jQuery('.pgSrefSystem').live('change', function(){
  var myRow=jQuery(this).closest('tr');
  switch(jQuery(this).val()){";
    $j=0;
    foreach($srefs as $sref){
      $parts=explode(',',$sref);
      $systemCtrl.="<option value=\"".$j."\">".$parts[1]."</option>";
      data_entry_helper::$javascript .= "
    case \"".$j."\":
      myRow.find('.X').empty().append(\"".$parts[2]." : \");
      myRow.find('.Y').empty().append(\"".$parts[3]." : \");
      myRow.data('system',\"".$parts[0]."\");
      myRow.data('output',\"".$parts[4]."\");
      break;";
      $j++;
    }
    $systemCtrl.="</select></td>";
    data_entry_helper::$javascript .= "
  }
  if(myRow.data('WKT')) setMySref(myRow);
});
jQuery('[name=pg\\:srefX],[name=pg\\:srefY]').live('change', function(){
  if(!modPointFeature.feature) return;
  var myRow=jQuery(this).closest('tr');
  if(myRow.find('[name=pg\\:srefX]').val()=='' || myRow.find('[name=pg\\:srefY]').val()=='') return;
  $.getJSON(\"".data_entry_helper::$base_url."/index.php/services/spatial/sref_to_wkt\"+
            \"?sref=\" + myRow.find('[name=pg\\:srefX]').val() + ', ' + myRow.find('[name=pg\\:srefY]').val() +
            \"&system=\" + myRow.data('system') +
            \"&callback=?\", function(data) {
      if(typeof data.error != 'undefined')
        alert(data.error);
      else {
        var parser = new OpenLayers.Format.WKT();
        var feature = parser.read(data.wkt);
        myRow.data('geometry',feature.geometry).data('oldGeometry',feature.geometry.clone()).data('WKT',data.wkt);
        var replace;
        if(jQuery('.pgDataRow').length>1){
          var geom=[];
          jQuery('.pgDataRow').each(function(idx,elem){geom.push(jQuery(this).data('geometry'));});
          replace = new OpenLayers.Geometry.MultiPoint(geom);
        } else {
          replace=feature.geometry;
        }
        replaceGeom(modPointFeature.feature, SitePointLayer, modPointFeature, replace, true, true);
      }
    });
});
";
  }
  $retVal.=$systemCtrl;
  $retVal.="  <td><input id=\"pgNewPoint\" type=\"button\" value=\"".lang::get('LANG_AddPoint')."\"></td><td></td></tr>";
  $retVal.="</tbody></table>";
  $retVal.="</fieldset>";
  data_entry_helper::$javascript .= "
jQuery('.pgSrefSystem').change();
jQuery('.pgDeletePoint').live('click', function(){
  if(!modPointFeature.feature) return;
  var myRow=jQuery(this).closest('tr').remove();
  switch(jQuery('.pgDataRow').length){
    case 0:
      var feature = modPointFeature.feature;
      modPointFeature.unselectFeature(feature);
      SitePointLayer.destroyFeatures([feature]);
      break;
    case 1:
      replaceGeom(modPointFeature.feature, SitePointLayer, modPointFeature,
          new OpenLayers.Geometry.Point(jQuery('.pgDataRow').data('geometry')), true, true);
      break;
    default:
      var geom=[];
      jQuery('.pgDataRow').each(function(idx,elem){geom.push(jQuery(this).data('geometry'));});
      replaceGeom(modPointFeature.feature, SitePointLayer, modPointFeature,
          new OpenLayers.Geometry.MultiPoint(geom), true, true);
      break;
  }
});
function onPopupClose(evt) {
  // 'this' is the popup.
  this.row.data('popup',null);
  SiteLabelLayer.map.removePopup(this);
  this.row=null;
  this.destroy();
}
removePopups = function() {
  jQuery('.pgDataRow').each(function(idx,elem){
    var popup = jQuery(this).data('popup');
    if(popup){
      jQuery(this).data('popup',null);
      SiteLabelLayer.map.removePopup(popup);
      popup.row=null;
      popup.destroy();
    }
  });
}
jQuery('.pgHighlightPoint').live('click', function(){
  if(!modPointFeature.feature) return;
  var myRow=jQuery(this).closest('tr');
  removePopups();
  popup = new OpenLayers.Popup.FramedCloud(\"featurePopup\",
               myRow.data('geometry').getBounds().getCenterLonLat(),
               new OpenLayers.Size(100,100),
               \"(\" + myRow.find('[name=pg\\:srefX]').val() + ', ' + myRow.find('[name=pg\\:srefY]').val() + \")\",
               null, true, onPopupClose);
  myRow.data('popup',popup);
  popup.row = myRow;
  SiteLabelLayer.map.addPopup(popup);
});
addPGPoint = function(geometry){
  removePopups();
  var wkt= getwkt(geometry, true, true);
  var newRow=jQuery('<tr class=\"pgDataRow\">');
  newRow.append('<td><label class=\"auto-width X\" >".lang::get('LANG_Grid_X_Label')." :</label><input type=\"text\" name=\"pg:srefX\" value=\"\" /></td>');
  newRow.append('<td><label class=\"auto-width Y\" >".lang::get('LANG_Grid_Y_Label')." :</label><input type=\"text\" name=\"pg:srefY\" value=\"\" /></td>');
  newRow.append('".$systemCtrl."');
  newRow.append('<td><input class=\"pgDeletePoint\" type=\"button\" value=\"".lang::get('LANG_DeletePoint')."\"></td>');
  newRow.append('<td><input class=\"pgHighlightPoint\" type=\"button\" value=\"".lang::get('LANG_HighlightPoint')."\"></td>');
  newRow.data('WKT',wkt).data('geometry',geometry).data('oldGeometry',geometry.clone()).data('popup',null);
  jQuery('#pointgridtable').append(newRow);
  newRow.find('.pgSrefSystem').val(jQuery('.pgAddRow').find('.pgSrefSystem').val()).change();
};
modPGPoint = function(geometry){
  removePopups();
  if(geometry==null) geomList=[];
  else if(geometry.CLASS_NAME == \"OpenLayers.Geometry.Point\") geomList=[geometry];
  else geomList=geometry.components;
  jQuery('.pgDataRow').each(function(idx,elem){
    if(jQuery(this).data('geometry').x != jQuery(this).data('oldGeometry').x || 
        jQuery(this).data('geometry').y != jQuery(this).data('oldGeometry').y){
      // the geometry, which is the same object as the feature, has moved
      var wkt= getwkt(jQuery(this).data('geometry'), true, true);
      jQuery(this).data('WKT',wkt).data('oldGeometry',jQuery(this).data('geometry').clone());
      jQuery(this).find('.pgSrefSystem').change();
    }
    var found=false;
    for(var i=0; i< geomList.length; i++){
      if(geomList[i]==jQuery(this).data('geometry')) found=true;
    }
    if(!found) jQuery(this).remove();
  });
}
jQuery('#pgNewPoint').click(function(){
  // only add if the modPointFeature is active.
  if(!modPointFeature.active) return;
  if($('#new-srefX').val()=='' || $('#new-srefY').val()=='') return;
  $.getJSON(\"".data_entry_helper::$base_url."/index.php/services/spatial/sref_to_wkt\"+
            \"?sref=\" + $('#new-srefX').val() + ', ' + $('#new-srefY').val() +
            \"&system=\" + jQuery('.pgAddRow').data('system') +
            \"&callback=?\", function(data) {
      if(typeof data.error != 'undefined') alert(data.error);
      else {
        var parser = new OpenLayers.Format.WKT();
        var feature = parser.read(data.wkt);
        addDrawnPointToSelection(feature.geometry);
        $('#new-srefX').val('');
        $('#new-srefY').val('');
      }
    });
});
populatePGrid= function(){
  clearPGrid();
  if(modPointFeature.feature){
    if(modPointFeature.feature.geometry.CLASS_NAME == \"OpenLayers.Geometry.Point\"){
      addPGPoint(modPointFeature.feature.geometry);
    } else { // multipoint
      for(var i=0; i< modPointFeature.feature.geometry.components.length; i++){
        addPGPoint(modPointFeature.feature.geometry.components[i]);
      }
    }
  }
  jQuery('.pgSrefSystem').change(); // triggers the population of the X/Y for all rows
};
clearPGrid= function(){jQuery('.pgDataRow').remove();}
";
  return $retVal;
}

function iform_mnhnl_SrefFields($auth, $args, $incLocTypeDropDown=false) {
  if($args['LocationTypeTerm']=='' && isset($args['loctoolsLocTypeID'])) $args['LocationTypeTerm']=$args['loctoolsLocTypeID'];
  $primary = iform_mnhnl_getTermID($auth, $args['locationTypeTermListExtKey'],$args['LocationTypeTerm']);	
  data_entry_helper::$javascript .= "
// functions for iform_mnhnl_SrefFields
_setSref = function(sref){
  $('#imp-sref').val(sref);
  if (sref.indexOf(' ')!==-1) {
    var parts=sref.split(' ');
    parts[0]=parts[0].split(',')[0]; // part 1 may have a comma at the end, so remove
    $('#imp-srefX').val(parts[0]);
    $('#imp-srefY').val(parts[1]);
}};
setSref = function(geometry, sref){
  var centre = getCentroid(geometry);
  if(typeof hook_setSref != 'undefined')
    hook_setSref(centre);
  if(sref=='TBC'){
    jQuery.getJSON(\"".data_entry_helper::$base_url."/index.php/services/spatial/wkt_to_sref?wkt=POINT(\" + centre.x + \"  \" + centre.y + \")&system=2169&precision=8&callback=?\",
      function(data){
        if(typeof data.error != 'undefined')
          alert(data.error);
        else
          _setSref(data.sref);
       });
  } else {
    _setSref(sref);
  }
};
$('#imp-srefX,#imp-srefY').change(function() {
  if($('#imp-srefX').val()!='' && $('#imp-srefY').val()!='') {
    $('#imp-sref').val($('#imp-srefX').val() + ', ' + $('#imp-srefY').val());
    handleEnteredSref($('#imp-sref').val());
  }
});
function handleEnteredSref(value) {
  if (value!='') {
    $.getJSON(\"".data_entry_helper::$base_url."/index.php/services/spatial/sref_to_wkt\"+
            \"?sref=\" + value +
            \"&system=2169\" +
            \"&callback=?\", function(data) {
      if(typeof data.error != 'undefined')
        alert(data.error);
      else {
        $('#centroid_geom').val(data.wkt);
        var parser = new OpenLayers.Format.WKT();
        var feature = parser.read(data.wkt);
        if(typeof hook_setSref != 'undefined')
          hook_setSref(feature.geometry);
        for(var i=0; i<SitePointLayer.features.length; i++){
          if(SitePointLayer.features[i].attributes.highlighted == true){
            replaceGeom(SitePointLayer.features[i], SitePointLayer, modPointFeature, feature.geometry, false, false);
          }
        }
      }
    });
  }
}
";
	$retVal = "<input type=\"hidden\" id=\"imp-sref\" name=\"location:centroid_sref\" value=\"".data_entry_helper::$entity_to_load['location:centroid_sref']."\" />
<input type=\"hidden\" id=\"imp-geom\" name=\"location:centroid_geom\" value=\"".data_entry_helper::$entity_to_load['location:centroid_geom']."\" />
<input type=\"hidden\" id=\"imp-boundary-geom\" name=\"location:boundary_geom\" value=\"".data_entry_helper::$entity_to_load['location:boundary_geom']."\" />
<input type=\"hidden\" id=\"locWebsite\" name=\"locations_website:website_id\" value=\"".$args['website_id']."\" />
";
	if($args['SecondaryLocationTypeTerm']!='' && $incLocTypeDropDown) {
		$secondary = iform_mnhnl_getTermID($auth, $args['locationTypeTermListExtKey'],$args['SecondaryLocationTypeTerm']);	
		$retVal .= "<label for=\"location_location_type_id\">".lang::get('LANG_Location_Type_Label').":</label>
  <select id=\"location_location_type_id\" name=\"location:location_type_id\">
    <option value=\"\"></option>
    <option value=\"$primary\">".lang::get('LANG_Location_Type_Primary')."</option>
    <option value=\"$secondary\">".lang::get('LANG_Location_Type_Secondary')."</option>
  </select><br />";
	} else
		$retVal .= "<input type=\"hidden\" name=\"location:location_type_id\" value=\"".$primary."\" />
";
    $dummy=array('','');
    if($args['locationMode']!='multi'){
      if(isset(data_entry_helper::$entity_to_load["location:centroid_sref"]))
        $dummy = explode(',',data_entry_helper::$entity_to_load["location:centroid_sref"]);
    }
    if($args['usePoints']=='single' && $args['useLines']=='none' && $args['usePolygons']=='none'){
    	$readOnly="";
    } else $readOnly=" readonly=\"readonly\" ";
	$retVal .= "<label for=\"imp-srefX\" class=\"auto-width\" >".lang::get('LANG_Location_X_Label').":</label>
  <input type=\"text\" id=\"imp-srefX\" name=\"dummy:srefX\" value=\"".trim($dummy[0])."\" ".$readOnly."/>
<label for=\"imp-srefY\" class=\"auto-width prepad\" >".lang::get('LANG_Location_Y_Label').":</label>
  <input type=\"text\" id=\"imp-srefY\" name=\"dummy:srefY\" value=\"".trim($dummy[1])."\" ".$readOnly."/>
<span id=\"coords-text\" class=\"coords-text\">".lang::get('LANG_LatLong_Bumpf')."</span><br />
";
	return $retVal;
}
function iform_mnhnl_set_editable($auth, $args, $node, $locList, $force){
  global $user;
  if($force === true || $force === false){
    data_entry_helper::$javascript .= "canEditExistingSites = ".($force ? "true" : "false").";
";
    return;
  }
  $isAdmin = user_access('IForm n'.$node->nid.' admin');
  if($isAdmin) {
  	data_entry_helper::$javascript .= "canEditExistingSites = true;
";
    return;
  }
  $userIdAttr=iform_mnhnl_getAttrID($auth, $args, 'sample', 'CMS User ID');
  if (!$userIdAttr) return lang::get('This form must be used with a survey that has the CMS User ID sample attribute associated with it so records can be tagged against their creator.');
  if(count($locList)==0){
    $location_list_args=array(
          'nocache'=>true,
          'extraParams'=>array_merge(array(
              'orderby'=>'name',
              'view'=>'detail',
              'website_id'=>$args['website_id'],
              'location_type_id'=>$loctypeParam),
            $auth['read']),
          'table'=>'location');
    // Idea here is to get a list of all locations in order to build drop downs.
    $locList = data_entry_helper::get_population_data($location_list_args);
    if (isset($locList['error'])) return $locList['error'];
  }
  $primary = iform_mnhnl_getTermID($auth, $args['locationTypeTermListExtKey'],$args['LocationTypeTerm']);
  data_entry_helper::$javascript .= "SiteEditable = {";
  foreach($locList as $location){
    $canEdit=true;
    if($location['location_type_id']==$primary){
      $sample_list_args=array(
        'nocache'=>true,
        'extraParams'=>array_merge(array(
              'view'=>'detail',
              'website_id'=>$args['website_id'],
              'location_id'=>$location['id']),
            $auth['read']),
        'table'=>'sample');
      // Idea here is to get a list of all locations in order to build drop downs.
      $smpList = data_entry_helper::get_population_data($sample_list_args);
      if (isset($smpList['error'])) return $smpList['error'];
      $smpIDs = array();
      foreach($smpList as $sample)
        $smpIDs[] = $sample['id'];
      $sample_attr_args=array(
        'nocache'=>true,
        'extraParams'=>array_merge(array(
              'website_id'=>$args['website_id'],
              'sample_attribute_id'=>$userIdAttr,
              'sample_id'=>$smpIDs),
            $auth['read']),
        'table'=>'sample_attribute_value');
      $smpAttr = data_entry_helper::get_population_data($sample_attr_args);
      $canEdit=true;
      foreach($smpAttr as $attribute){
        if(!empty($attribute['id']) &&
            $attribute['sample_attribute_id'] == $userIdAttr &&
            $attribute['raw_value'] != $user->uid){
          $canEdit=false;
        }
      }
    } else $canEdit=false; // confirm location
    data_entry_helper::$javascript .= "\"".$location['id']."\" : ".($canEdit ? "true" : "false").",
";
  }
  data_entry_helper::$javascript .= "};
";
}
function iform_mnhnl_getTermID($auth,$termListExtKey,$term){
  $termList = helper_base::get_termlist_terms($auth, $termListExtKey, array($term));
  return $termList[0]['id'];
}
function iform_mnhnl_locationmodule_lateJS($auth, $args, $tabalias, $options) {
// If entity to load is set, then we are highlighting an existing location, can't modify, but can start drawing another site.
  if(isset(data_entry_helper::$entity_to_load['location:id'])){
    data_entry_helper::$late_javascript .= "
setupButtons($('#controls'), 1);
setupButtons($('#controls'), 2);
setupButtons($('#controls'), 0);";
  };
  return '';
}
  
function iform_mnhnl_getAttr($auth, $args, $table, $caption){
  switch($table){
  	case 'occurrence':
  		$prefix = 'occAttr';
  		break;
  	case 'sample':
  		$prefix = 'smpAttr';
  		break;
  	case 'location':
  		$prefix = 'locAttr';
  		break;
  	default: return false;
  }
  $myAttributes = data_entry_helper::getAttributes(array(
        'valuetable'=>$table.'_attribute_value'
       ,'attrtable'=>$table.'_attribute'
       ,'key'=>$table.'_id'
       ,'fieldprefix'=>$prefix
       ,'extraParams'=>$auth['read']
       ,'survey_id'=>$args['survey_id']
      ), false);
  foreach($myAttributes as $attr)
    if (strcasecmp($attr['untranslatedCaption'],$caption)==0)
      return $attr;

  return false;
}
function iform_mnhnl_locationattributes($auth, $args, $tabalias, $options) {
    $creatorAttr=iform_mnhnl_getAttrID($auth, $args, 'location', 'Creator');
    if($creatorAttr){
      data_entry_helper::$javascript .= "
jQuery('[name=locAttr:".$creatorAttr."],[name^=locAttr:".$creatorAttr.":]').attr('readonly','readonly');";
    }
    $attrArgs = array(
       'valuetable'=>'location_attribute_value',
       'attrtable'=>'location_attribute',
       'key'=>'location_id',
       'fieldprefix'=>'locAttr',
       'extraParams'=>$auth['read'],
       'survey_id'=>$args['survey_id']
      );
    $tabName = (isset($options['tabNameFilter']) ? $options['tabNameFilter'] : null);
    if (array_key_exists('location:id', data_entry_helper::$entity_to_load) && data_entry_helper::$entity_to_load['location:id']!="") {
      // if we have location Id to load, use it to get attribute values
      $attrArgs['id'] = data_entry_helper::$entity_to_load['location:id'];
    }
    $locationAttributes = data_entry_helper::getAttributes($attrArgs, false);
    $defAttrOptions = array_merge(
        array('extraParams' => array_merge($auth['read'], array('view'=>'detail')),
              'language' => iform_lang_iso_639_2($args['language'])),$options);
   $r = '';
   foreach ($locationAttributes as $attribute) {
    if ($tabName===null || strcasecmp($tabName,$attribute['inner_structure_block'])==0) {
      $opt = $defAttrOptions + get_attr_validation($attribute, $args);
      $r .= data_entry_helper::outputAttribute($attribute, $opt);
    }
   }
   return $r;
}

function iform_mnhnl_getAttrID($auth, $args, $table, $caption){
  $attr = iform_mnhnl_getAttr($auth, $args, $table, $caption);
  if($attr) return $attr['attributeId'];
  return false;
}

function iform_mnhnl_getReloadPath(){
  $reload = data_entry_helper::get_reload_link_parts();
  unset($reload['params']['sample_id']);
  unset($reload['params']['occurrence_id']);
  unset($reload['params']['newSample']);
  $reloadPath = $reload['path'];
  if(count($reload['params'])) $reloadPath .= '?'.http_build_query($reload['params']);
  return $reloadPath;
}

function iform_mnhnl_addCancelButton(){
  data_entry_helper::$javascript .= "
jQuery('<div class=\"ui-widget-content ui-state-default ui-corner-all indicia-button tab-cancel\"><span><a href=\"".iform_mnhnl_getReloadPath()."\">".lang::get('LANG_Cancel')."</a></span></div>').appendTo('.buttons');
";
}
