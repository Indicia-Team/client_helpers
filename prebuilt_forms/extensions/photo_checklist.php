<?php

/**
 * Indicia, the OPAL Online Recording Toolkit.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/gpl.html.
 *
 * @author Indicia Team
 * @license http://www.gnu.org/licenses/gpl.html GPL 3.0
 * @link https://github.com/Indicia-Team/client_helpers
 */

/**
 * Extension class for a photo-based species checklist input control.
 */
class extension_photo_checklist {

  /**
   * A grid for entering species chosen from a predefined list of photos.
   *
   * The control can output several sections of photo thumbnails (e.g. common
   * species plus rare species). Allows the user to set a count for each and
   * to upload their own photos by replacing the default one.
   *
   * Options include:
   * * expandSections - define which sections will be expanded on initial load.
   *     Options are "first", "all" or "none". Works if using default Bootstrap
   *     templates.
   * * id - ID of the control, or a unique default is autogenerated.
   * * countOccAttrId = ID of the occurrence attribute that will be used to
   *   hold count abundance data.
   * * imagesPath - path to the default images folder for each thumbnail.
   *   Defaults to <public files folder>/indicia/photo-checklist. Image files
   *   should be placed in here for each species in the checklist, where the
   *   file name is the taxon name, lowercase, with all non-alphanumeric
   *   characters replaced by '-', and with a '.jpg' suffix.
   * * resizeHeight - height to resize uploaded photos to in pixels. Default
   *   1500.
   * * resizeQuality - quality of resized images, scale from 1 to 100. Default
   *   90.
   * * resizeWidth - width to resize uploaded photos to in pixels. Default
   *   1500.
   * * speciesInfoLink - to enable a species information link icon on each
   *   thumbnail, set this to the root URL of a set of pages that describes
   *   each of the species. The page URL for a species must be this root URL,
   *   with the taxon's common name appended, lowercased and with all
   *   non-alphanumeric characters replaced by a hyphen.
   * * speciesInfoLinkTemplate - a template for the species info link, which
   *   supports replacements {{ species-info-link }} {{ link-common-name }}.
   *   Use this option only when the link HTML needs to be overridde.
   * * dontLinkSpecies - if any of the species should not be linked then
   *   then provide their preffered names, e.g. if the resource that hosts
   *   species pages does not cover all the species. Provide an array of
   *   strings.
   * * speciesSections - An array of sections to include in the grid, keyed
   *   by the title. Sections can have their data loaded by an AJAX request to
   *   the warehouse. To enable this, each section must contain a child object
   *   with a `params` property, which defines the array of filter values to
   *   pass to the taxa_search API when requesting the list of taxa to display.
   *   E.g.:
   *
   *   ```
   *   @speciesSections=<!--{
   *     "Common species": {
   *       "params": {
   *         "taxon_list_id": 1,
   *         "external_key": "[\"NHMSYS0000504624\",\"NHMSYS0000523344\",\"NHMSYS0000516260\",\"NBNSYS0100005950\",\"NHMSYS0000501034\",\"NHMSYS0000503827\",\"NHMSYS0000503832\",\"NHMSYS0000516186\"]",
   *         "preferred": true
   *       }
   *     }
   *   }-->
   *   ```
   *
   *   Alternatively, a preloaded taxon list can be specified as follows
   *   (example loads one species only, the format is the same as the output of
   *   the taxa_search web-service):
   *   ```
   *   @speciesSections=<!--{
   *     "Common species": {
   *       "taxaList": [
   *         {
   *           "taxa_taxon_list_id": "4999",
   *           "searchterm": "Aglais urticae (Linnaeus, 1758)",
   *           "original": "Aglais urticae",
   *           "taxon": "Aglais urticae",
   *           "authority": "(Linnaeus, 1758)",
   *           "language_iso": "lat",
   *           "preferred_taxon": "Aglais urticae",
   *           "preferred_authority": "(Linnaeus, 1758)",
   *           "default_common_name": "Small Tortoiseshell",
   *           "taxon_group": "insect - butterfly",
   *           "preferred": "t",
   *           "preferred_taxa_taxon_list_id": "4999",
   *           "taxon_meaning_id": "2556",
   *           "external_key": "NHMSYS0000501034",
   *           "taxon_group_id": "44",
   *           "parent_id": "4993",
   *           "identification_difficulty": null,
   *           "id_diff_verification_rule_id": null,
   *           "taxon_rank_sort_order": "300"
   *         }
   *       ]
   *     }
   *   }-->
   *   ```
   * * containerTemplate - a template for the entire control's container. The
   *   default wraps the control in a Bootstrap panel group.
   * * sectionTemplate - a template for each section. The default implements a
   *   Bootstrap collapsible panel.
   * * itemTemplate - a template for each thumbnail. The default implements a
   *   Bootstrap panel.
   */
  public static function photo_checklist_grid($auth, $args, $tabalias, $options, $path) {
    helper_base::add_resource('fancybox');
    helper_base::add_resource('font_awesome');
    helper_base::add_resource('plupload');
    self::applyDefaultOptions($options);
    helper_base::$indiciaData['uploadScript'] = helper_base::getRootFolder() . helper_base::client_helper_path() . 'upload.php';
    helper_base::$indiciaData['imageRelativePath'] = helper_base::getImageRelativePath();
    helper_base::$indiciaData['interimImagePath'] = helper_base::getInterimImageFolder();
    helper_base::$indiciaData['rootFolder'] = helper_base::getRootFolder();
    foreach ($options['speciesSections'] as $sectionInfo) {
      if (empty($sectionInfo['params'])) {
        throw new exception('The [photo_checklist.photo_checklist_grid] control @speciesSections array items each need a params configuration to define the taxa to load.');
      }
    }
    $occurrences = self::loadExistingSampleOccurrences($auth, $options);
    helper_base::$indiciaData["photo-checklist-$options[id]"] = [
      'expandSections' => $options['expandSections'],
      'speciesSections' => $options['speciesSections'],
      'occurrences' => $occurrences,
      'sectionTemplate' => $options['sectionTemplate'],
      'itemTemplate' => $options['itemTemplate'],
      'imagesPath' => $options['imagesPath'],
      'speciesInfoLink' => $options['speciesInfoLink'],
      'speciesInfoLinkTemplate' => $options['speciesInfoLinkTemplate'],
      'dontLinkSpecies' => $options['dontLinkSpecies'],
      'resizeHeight' => $options['resizeHeight'],
      'resizeWidth' => $options['resizeWidth'],
      'resizeQuality' => $options['resizeQuality'],
      'sectionTooltip' => lang::get('Click to expand or collapse the species in this section.'),
    ];
    $r = str_replace(['{{ id }}'], [$options['id']], $options['containerTemplate']);
    // Enable custom submission handling.
    $r .= data_entry_helper::hidden_text([
      'fieldname' => 'submission_extensions[]',
      'default' => 'photo_checklist.build_submission',
    ]);
    $r .= data_entry_helper::hidden_text([
      'fieldname' => 'occ:countOccAttrId',
      'default' => $options['countOccAttrId'],
    ]);
    return $r;
  }

  /**
   * A location picker that loads the photo list according to an attribute.
   *
   * E.g. a list of locations with a "Region" attribute can be shown, when the
   * user picks a location, the photo checklist control is populated with
   * species for that region.
   *
   * If there is only one site, then it will be selected by default and the
   * list is immediately populated.
   *
   * Options include:
   * * dataFile - name of a json format file in the public
   *   files/indicia/photo-checklist folder which defines the list of species
   *   for each region.
   * * extraParams - provide any filters for the list of locations, e.g. a
   *   location_type_id.
   * * label - control label.
   * * locAttrId - ID of the location attribute ID to load the photo checklist
   *   based on the value of.
   * * limitToCreatedByUser - if true, then only locations created by the user
   *   are listed.
   * * saveLinkToLocation - defaults to true. If set to false, then the sample
   *   location_id field is ommitted from submissions, so the only location
   *   info saved is the spatial reference. Allows a user to keep a list of
   *   personal site names that don't form part of a record.
   *
   * Other options for the data_entry_helper::location_select control can also
   * be used.
   */
  public static function photo_checklist_by_location_attr($auth, $args, $tabalias, $options, $path) {
    if (empty($options['locAttrId'])) {
      hostsite_show_message(lang::get('The [photo_checklist.photo_checklist_by_location_attr] control needs a @locAttrId option.'));
      return '';
    }
    if (empty($options['dataFile'])) {
      hostsite_show_message(lang::get('The [photo_checklist.photo_checklist_by_location_attr] control needs a @dataFile option.'));
      return '';
    }
    $options = array_merge([
      'blankText' => lang::get('- Please select -'),
      'extraParams' => [],
      'label' => lang::get('Site'),
      'searchUpdatesSref' => TRUE,
      'dataAttrFields' => ['centroid_sref'],
      'columns' => 'id,name,centroid_sref',
      'saveLinkToLocation' => TRUE,
    ], $options);
    if (!$options['saveLinkToLocation']) {
      // Unlink from the database.
      $options['fieldname'] = 'foo';
      // But relink to location selection functionality.
      $options['id'] = 'imp-location';
    }
    $options['extraParams'] += $auth['read'];
    if (!empty($options['limitToCreatedByUser'])) {
      $options['extraParams'] += ['created_by_id' => hostsite_get_user_field('indicia_user_id')];
    }
    data_entry_helper::$indiciaData['useLocAttrToPopulatePhotoChecklist'] = $options['locAttrId'];
    data_entry_helper::$indiciaData['photoChecklistSaveLinkToLocation'] = $options['saveLinkToLocation'];
    $filepath = hostsite_get_public_file_path();
    data_entry_helper::$indiciaData['photoChecklistDataFile'] = data_entry_helper::getRootFolder() . "$filepath/indicia/photo-checklist/$options[dataFile]";
    return data_entry_helper::location_select($options);
  }

  /**
   * Custom building of a photo_checklist's submission.
   *
   * Adds occurrences, media and count attribute values to the submission as
   * appropriate.
   *
   * @param array $values
   *   Posted values.
   * @param array $s_array
   *   Submission array, which will initially contain a sample.
   */
  public static function build_submission(array $values, array $s_array) {
    $existingIdFields = preg_grep('/occ:photo-checklist-occ:id:\d+-\d+/', array_keys($values));
    $countFields = preg_grep('/occ:photo-checklist-count-\d+-\d+/', array_keys($values));
    foreach ($countFields as $countField) {
      if (!empty($values[$countField])) {
        $uniqId = str_replace('occ:photo-checklist-count-', '', $countField);
        $occurrence = [
          'website_id' => $values['website_id'],
          'occAttr:' . $values['occ:countOccAttrId'] => $values[$countField],
          'taxa_taxon_list_id' => $values[str_replace('-count-', '-ttl:id:', $countField)],
        ];
        // Attach to existing occurrence ID if updating.
        if (!empty($values["occ:photo-checklist-occ:id:$uniqId"])) {
          $occurrence['id'] = $values["occ:photo-checklist-occ:id:$uniqId"];
          // Unset so we can track which are deleted.
          $key = array_search("occ:photo-checklist-occ:id:$uniqId", $existingIdFields);
          if ($key !== FALSE) {
            unset($existingIdFields[$key]);
          }
        }
        $mediaPathField = "occ:photo-checklist-media:path:$uniqId";
        $mediaIdField = "occ:photo-checklist-media:id:$uniqId";
        if (!empty($values[$mediaPathField])) {
          $occurrence["occurrence_medium:path:$uniqId"] = $values[$mediaPathField];
          if (!empty($values[$mediaIdField])) {
            $occurrence["occurrence_medium:id:$uniqId"] = $values[$mediaIdField];
          }
          if ($values["occ:photo-checklist-media:deleted:$uniqId"] === 't') {
            $occurrence["occurrence_medium:deleted:$uniqId"] = 't';
          }
        }
        $wrappedOccurrence = submission_builder::build_submission($occurrence, [
          'model' => 'occurrence',
        ]);
        $s_array[0]['subModels'][] = [
          'fkId' => 'sample_id',
          'model' => $wrappedOccurrence,
        ];
      }
    }
    // Remaining existing ID fields containing IDs are deletions.
    foreach ($existingIdFields as $idField) {
      if (!empty($values[$idField])) {
        $occurrence = [
          'id' => $values[$idField],
          'website_id' => $values['website_id'],
          'deleted' => 't',
        ];
        $wrappedOccurrence = submission_builder::build_submission($occurrence, [
          'model' => 'occurrence',
        ]);
        $s_array[0]['subModels'][] = [
          'fkId' => 'sample_id',
          'model' => $wrappedOccurrence,
        ];
      }
    }
  }

  /**
   * Applies defaults, such as templates, to the controls' options.
   *
   * @param array $options
   *   Options array which will be updated with default values where a value is
   *   not set.
   */
  private static function applyDefaultOptions(array &$options) {
    static $photoChecklistCount = 0;
    $photoChecklistCount++;
    if (empty($options['countOccAttrId'])) {
      throw new exception('The [photo_checklist.photo_checklist_grid] control requires a @countOccAttrId option.');
    }
    if (!empty($options['speciesSections']) && !is_array($options['speciesSections'])) {
      throw new exception('The [photo_checklist.photo_checklist_grid] @speciesSections is not a valid JSON object.');
    }
    $options = array_merge([
      'expandSections' => 'first',
      'speciesSections' => [],
      'id' => "photo-checklist-$photoChecklistCount",
      'imagesPath' => helper_base::getRootFolder() . hostsite_get_public_file_path() . '/indicia/photo-checklist',
      'resizeHeight' => 1500,
      'resizeWidth' => 1500,
      'resizeQuality' => 90,
      // Templates.
      'containerTemplate' => '<div class="panel-group photo-checklist" id="{{ id }}"></div>',
      'sectionTemplate' => '
<div class="panel panel-default photo-checklist-section">
  <div class="panel-heading">
    <h4 class="panel-title">
    <a data-toggle="collapse" title="{{ section_tooltip }}" href="#{{ section_id }}">{{ section_title }}</a>
    </h4>
  </div>
  <div id="{{ section_id }}" class="panel-collapse collapse">
    <div class="panel-body photo-checklist-item-container"></div>
  </div>
</div>',
      'itemTemplate' => '
<div class="panel panel-default photo-checklist-item">
  <div class="panel-body">
    <div class="photo-wrap">
      {{ image }}
      <div class="shading"></div>
      <div class="photo-toolbar">
        <i class="fas fa-trash-alt delete-photo" title="' . lang::get('Remove the photo you uploaded for this species') . '"></i>
        <i class="fas fa-camera upload-photo" id="photo-upload-{{ section_idx }}-{{ item_idx }}" title="' . lang::get('Upload a photo for this species') . '"></i>
        {{ speciesInfoLink }}
      </div>
      <progress value="32" max="100" style="display: none"> 32% </progress>
    </div>
    <div class="taxon-label">{{ formatted_taxon }}</div>
    <input type="hidden" name="occ:photo-checklist-ttl:id:{{ section_idx }}-{{ item_idx }}" value="{{ ttl_id }}" />
    <input type="hidden" name="occ:photo-checklist-occ:id:{{ section_idx }}-{{ item_idx }}" value="{{ occ_id }}" />
    <input type="hidden" class="photo-checklist-media-path" name="occ:photo-checklist-media:path:{{ section_idx }}-{{ item_idx }}" value="{{ media_path }}" />
    <input type="hidden" class="photo-checklist-mediaid" name="occ:photo-checklist-media:id:{{ section_idx }}-{{ item_idx }}" value="{{ media_id }}" />
    <input type="hidden" class="photo-checklist-media-deleted" name="occ:photo-checklist-media:deleted:{{ section_idx }}-{{ item_idx }}" value="f" />
    <input type="number" class="form-control" name="occ:photo-checklist-count-{{ section_idx }}-{{ item_idx }}" min="1" placeholder="' . lang::get('Enter number seen') . '" value="{{ count }}">
  </div>
</div>',
      'speciesInfoLinkTemplate' => '<a target="_blank" href="{{ species-info-link }}{{ link-common-name }}" title="' . lang::get('Find out more about this species') . '"><i class="fas fa-info-circle photo-info"></i></a>',
      'dontLinkSpecies' => [],
    ], $options);
  }

  /**
   * When editing a sample, load the sample's occurrence data.
   *
   * @param array $auth
   *   Authorisation tokens.
   * @param array $options
   *   Control options array.
   *
   * @return array
   *   List of occurrence data, keyed by preferred taxa_taxon_list ID.
   */
  private static function loadExistingSampleOccurrences(array $auth, $options) {
    if (!empty(data_entry_helper::$entity_to_load['sample:id'])) {
      iform_load_helpers(['report_helper']);
      $occurrences = report_helper::get_report_data([
        'dataSource' => '/reports_for_prebuilt_forms/photo_checklist/existing_occurrences',
        'extraParams' => [
          'sample_id' => data_entry_helper::$entity_to_load['sample:id'],
          'count_attr_id' => $options['countOccAttrId'],
        ],
        'readAuth' => [
          'auth_token' => $auth['read']['auth_token'],
          'nonce' => $auth['read']['nonce'],
        ],
      ]);
      $occurrencesByPrefId = [];
      foreach ($occurrences as $occurrence) {
        $occurrencesByPrefId[$occurrence['preferred_taxa_taxon_list_id']] = $occurrence;
      }
      return $occurrencesByPrefId;
    }
    return [];
  }

}
