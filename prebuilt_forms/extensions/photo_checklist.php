<?php

/**
 * Indicia, the OPAL Online Recording Toolkit.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/gpl.html.
 *
 * @author Indicia Team
 * @license http://www.gnu.org/licenses/gpl.html GPL 3.0
 * @link http://code.google.com/p/indicia/
 */

/**
 * Extension class for a photo-based species checklist input control.
 */
class extension_photo_checklist {

  /**
   * A grid for entering species chosen from a predefined list of photos.
   *
   * The control can output several sections of photo thumbnails (e.g. common
   * species plus rare species). Allows the user to set a count for each and
   * to upload their own photos by replacing the default one.
   *
   * Options include:
   * * expandSections - define which sections will be expanded on initial load.
   *     Options are "first", "all" or "none". Works if using default Bootstrap
   *     templates.
   * * id - ID of the control, or a unique default is autogenerated.
   * * countOccAttrId = ID of the occurrence attribute that will be used to
   *   hold count abundance data.
   * * imagesPath - path to the default images folder for each thumbnail.
   *   Defaults to <public files folder>/indicia/photo-checklist. Image files
   *   should be placed in here for each species in the checklist, where the
   *   file name is the taxon name, lowercase, with all non-alphanumeric
   *   characters replaced by '-', and with a '.jpg' suffix.
   * * resizeHeight - height to resize uploaded photos to in pixels. Default
   *   1500.
   * * resizeQuality - quality of resized images, scale from 1 to 100. Default
   *   90.
   * * resizeWidth - width to resize uploaded photos to in pixels. Default
   *   1500.
   * * speciesInfoLink - to enable a species information link icon on each
   *   thumbnail, set this to the root URL of a set of pages that describes
   *   each of the species. The page URL for a species must be this root URL,
   *   with the taxon's common name appended, lowercased and with all
   *   non-alphanumeric characters replaced by a hyphen.
   * * speciesInfoLinkTemplate - a template for the species info link, which
   *   supports replacements {{ species-info-link }} {{ link-common-name }}.
   *   Use this option only when the link HTML needs to be overridde.
   * * speciesSections - An array of sections to include in the grid, keyed
   *   by the title. Each section contains a child object with a `params`
   *   property, which defines the array of filter values to pass to the
   *   taxa_search API when requesting the list of taxa to display. E.g.:
   *
   *   ```
   *   @speciesSections=<!--{
   *     "Common species": {
   *       "params": {
   *         "taxon_list_id": 1,
   *         "external_key": "[\"NHMSYS0000504624\",\"NHMSYS0000523344\",\"NHMSYS0000516260\",\"NBNSYS0100005950\",\"NHMSYS0000501034\",\"NHMSYS0000503827\",\"NHMSYS0000503832\",\"NHMSYS0000516186\"]",
   *         "preferred": true
   *       }
   *     }
   *   }-->
   *   ```
   * * containerTemplate - a template for the entire control's container. The
   *   default wraps the control in a Bootstrap panel group.
   * * sectionTemplate - a template for each section. The default implements a
   *   Bootstrap collapsible panel.
   * * itemTemplate - a template for each thumbnail. The default implements a
   *   Bootstrap panel.
   */
  public static function photo_checklist_grid($auth, $args, $tabalias, $options, $path) {
    helper_base::add_resource('fancybox');
    helper_base::add_resource('font_awesome');
    helper_base::add_resource('plupload');
    self::applyDefaultOptions($options);
    helper_base::$indiciaData['uploadScript'] = helper_base::getRootFolder() . helper_base::client_helper_path() . 'upload.php';
    helper_base::$indiciaData['imageRelativePath'] = helper_base::getImageRelativePath();
    helper_base::$indiciaData['interimImagePath'] = helper_base::getInterimImageFolder();
    helper_base::$indiciaData['rootFolder'] = helper_base::getRootFolder();
    $occurrences = self::loadExistingSampleOccurrences($auth, $options);
    helper_base::$indiciaData["photo-checklist-$options[id]"] = [
      'expandSections' => $options['expandSections'],
      'speciesSections' => $options['speciesSections'],
      'occurrences' => $occurrences,
      'sectionTemplate' => $options['sectionTemplate'],
    ];
    $r = '';
    $sectionIdx = 0;
    foreach ($options['speciesSections'] as $title => $sectionInfo) {
      if (empty($sectionInfo['params'])) {
        throw new exception('The [photo_checklist.photo_checklist_grid] control @speciesSections array items each need a params configuration to define the taxa to load.');
      }
    }
      /*$sectionIdx++;
      //$items = self::getSpeciesPanels($sectionIdx, $auth, $options, $sectionInfo['params'], $occurrences);
      $r .= str_replace([
        //'{{ items }}',
        '{{ section_id }}',
        '{{ section_title }}',
      ], [
        //implode('', $items),
        "$options[id]-section-$sectionIdx",
        $title,
      ], $options['sectionTemplate']);
    }*/
    $r = str_replace(['{{ id }}'], [$options['id']], $options['containerTemplate']);
    // Enable custom submission handling.
    $r .= data_entry_helper::hidden_text([
      'fieldname' => 'submission_extensions[]',
      'default' => 'photo_checklist.build_submission',
    ]);
    $r .= data_entry_helper::hidden_text([
      'fieldname' => 'occ:countOccAttrId',
      'default' => $options['countOccAttrId'],
    ]);
    return $r;
  }

  /**
   * Custom building of a photo_checklist's submission.
   *
   * Adds occurrences, media and count attribute values to the submission as
   * appropriate.
   *
   * @param array $values
   *   Posted values.
   * @param array $s_array
   *   Submission array, which will initially contain a sample.
   */
  public function build_submission(array $values, array $s_array) {
    $existingIdFields = preg_grep('/occ:photo-checklist-occ:id:\d+-\d+/', array_keys($values));
    $countFields = preg_grep('/occ:photo-checklist-count-\d+-\d+/', array_keys($values));
    foreach ($countFields as $countField) {
      if (!empty($values[$countField])) {
        $uniqId = str_replace('occ:photo-checklist-count-', '', $countField);
        $occurrence = [
          'website_id' => $values['website_id'],
          'occAttr:' . $values['occ:countOccAttrId'] => $values[$countField],
          'taxa_taxon_list_id' => $values[str_replace('-count-', '-ttl:id:', $countField)],
        ];
        // Attach to existing occurrence ID if updating.
        if (!empty($values["occ:photo-checklist-occ:id:$uniqId"])) {
          $occurrence['id'] = $values["occ:photo-checklist-occ:id:$uniqId"];
          // Unset so we can track which are deleted.
          unset($existingIdFields["occ:photo-checklist-occ:id:$uniqId"]);
        }
        $mediaPathField = "occ:photo-checklist-media:path:$uniqId";
        $mediaIdField = "occ:photo-checklist-media:id:$uniqId";
        if (!empty($values[$mediaPathField])) {
          $occurrence["occurrence_medium:path:$uniqId"] = $values[$mediaPathField];
          if (!empty($values[$mediaIdField])) {
            $occurrence["occurrence_medium:id:$uniqId"] = $values[$mediaIdField];
          }
          if ($values["occ:photo-checklist-media:deleted:$uniqId"] === 't') {
            $occurrence["occurrence_medium:deleted:$uniqId"] = 't';
          }
        }
        // @todo Media deletion if a previously saved one binned.
        $wrappedOccurrence = submission_builder::build_submission($occurrence, [
          'model' => 'occurrence',
        ]);
        $s_array[0]['subModels'][] = [
          'fkId' => 'sample_id',
          'model' => $wrappedOccurrence,
        ];
      }
    }
    // @todo Check the existing records in case deleted.
  }

  /**
   * Applies defaults, such as templates, to the controls' options.
   *
   * @param array $options
   *   Options array which will be updated with default values where a value is
   *   not set.
   */
  private static function applyDefaultOptions(array &$options) {
    static $photoChecklistCount = 0;
    $photoChecklistCount++;
    if (empty($options['countOccAttrId'])) {
      throw new exception('The [photo_checklist.photo_checklist_grid] control requires a @countOccAttrId option.');
    }
    if (empty($options['speciesSections'])) {
      throw new exception('The [photo_checklist.photo_checklist_grid] control requires a @speciesSections option.');
    }
    if (!is_array($options['speciesSections'])) {
      throw new exception('The [photo_checklist.photo_checklist_grid] @speciesSections is not a valid JSON object.');
    }
    $options = array_merge([
      'expandSections' => 'first',
      'id' => "photo-checklist-$photoChecklistCount",
      'imagesPath' => helper_base::getRootFolder() . hostsite_get_public_file_path() . '/indicia/photo-checklist',
      'resizeHeight' => 1500,
      'resizeWidth' => 1500,
      'resizeQuality' => 90,
      // Templates.
      'containerTemplate' => '<div class="panel-group photo-checklist" id="{{ id }}"></div>',
      'sectionTemplate' => '
<div class="panel panel-default photo-checklist-section">
  <div class="panel-heading">
    <h4 class="panel-title">
      <a data-toggle="collapse" href="#{{ section_id }}">{{ section_title }}</a>
    </h4>
  </div>
  <div id="{{ section_id }}" class="panel-collapse collapse">
    <div class="panel-body photo-checklist-item-container"></div>
  </div>
</div>',
      'itemTemplate' => '
<div class="panel panel-default photo-checklist-item">
  <div class="panel-body">
    <div class="photo-wrap">
      {{ image }}
      <div class="shading"></div>
      <div class="photo-toolbar">
        <i class="fas fa-trash-alt delete-photo" title="' . lang::get('Remove the photo you uploaded for this species') . '"></i>
        <i class="fas fa-camera upload-photo" id="photo-upload-{{ section_idx }}-{{ item_idx }}" title="' . lang::get('Upload a photo for this species') . '"></i>
        {{ speciesInfoLink }}
      </div>
      <progress value="32" max="100" style="display: none"> 32% </progress>
    </div>
    <div class="taxon-label">{{ formatted_taxon }}</div>
    <input type="hidden" name="occ:photo-checklist-ttl:id:{{ section_idx }}-{{ item_idx }}" value="{{ ttl_id }}" />
    <input type="hidden" name="occ:photo-checklist-occ:id:{{ section_idx }}-{{ item_idx }}" value="{{ occ_id }}" />
    <input type="hidden" class="photo-checklist-media-path" name="occ:photo-checklist-media:path:{{ section_idx }}-{{ item_idx }}" value="{{ media_path }}" />
    <input type="hidden" class="photo-checklist-mediaid" name="occ:photo-checklist-media:id:{{ section_idx }}-{{ item_idx }}" value="{{ media_id }}" />
    <input type="hidden" class="photo-checklist-media-deleted" name="occ:photo-checklist-media:deleted:{{ section_idx }}-{{ item_idx }}" value="f" />
    <input type="number" class="form-control" name="occ:photo-checklist-count-{{ section_idx }}-{{ item_idx }}" min="1" placeholder="' . lang::get('Enter count seen') . '" value="{{ count }}">
  </div>
</div>',
      'speciesInfoLinkTemplate' => '<a target="_blank" href="{{ species-info-link }}{{ link-common-name }}" title="' . lang::get('Find out more about this species') . '"><i class="fas fa-info-circle photo-info"></i></a>',
    ], $options);
  }

  /**
   * Returns an array of species panel HTML blocks for a single section.
   *
   * @param int $sectionIdx
   *   Section unique identifier.
   * @param array $auth
   *   Authorisation tokens.
   * @param array $options
   *   Control options.
   * @param array $params
   *   Filter parameters for the web-service that retrieves the list of taxa.
   * @param array $occurrences
   *   Existing occurrence data to load when in editing mode.
   *
   * @return array
   *   Species panel HTML list.
   */
  private static function getSpeciesPanels($sectionIdx, array $auth, array $options, array $params, array $occurrences) {
    $taxa = helper_base::get_population_data([
      'table' => 'taxa_search',
      'extraParams' => $auth['read'] + $params,
    ]);
    $items = [];
    foreach ($taxa as $itemIdx => $taxon) {
      $existingOccurrence = isset($occurrences[$taxon['preferred_taxa_taxon_list_id']]) ? $occurrences[$taxon['preferred_taxa_taxon_list_id']] : NULL;
      drupal_set_message(var_export($existingOccurrence, TRUE));
      $items[] = str_replace([
        '{{ taxon }}',
        '{{ preferred_taxon }}',
        '{{ default_common_name }}',
        '{{ formatted_taxon }}',
        '{{ image }}',
        '{{ speciesInfoLink }}',
        '{{ section_idx }}',
        '{{ item_idx }}',
        '{{ occ_id }}',
        '{{ media_id }}',
        '{{ media_path }}',
        '{{ ttl_id }}',
        '{{ count }}',
      ], [
        $taxon['taxon'],
        $taxon['preferred_taxon'],
        $taxon['default_common_name'],
        self::getFormattedTaxonLabel($taxon),
        self::getTaxonImage($options, $taxon, $existingOccurrence),
        self::getSpeciesInfoLink($options, $taxon),
        $sectionIdx,
        $itemIdx,
        // Existing occurrence_id, media_id and path will go here.
        $existingOccurrence ? $existingOccurrence['occurrence_id'] : '',
        $existingOccurrence ? $existingOccurrence['media_id'] : '',
        $existingOccurrence ? $existingOccurrence['media_path'] : '',
        $taxon['taxa_taxon_list_id'],
        $existingOccurrence ? $existingOccurrence['count'] : '',
      ], $options['itemTemplate']);
    }
    return $items;
  }

  /**
   * Retrieves a taxon label.
   *
   * @param array $taxon
   *   Taxonomic data read from the database.
   * @param bool $italicise
   *   Should scientific species (or sub-species) names be italicised?
   *
   * @return string
   *   Returns the common name, if available, or the scientific name otherwise
   *   (italicised where appropriate).
   */
  private static function getFormattedTaxonLabel(array $taxon, $italicise = TRUE) {
    if (!empty($taxon['default_common_name'])) {
      return $taxon['default_common_name'];
    }
    elseif ($italicise && $taxon['taxon_rank_sort_order'] >= 300) {
      return $taxon["<em>$taxon[preferred_taxon]</em>"];
    }
    else {
      return $taxon["$taxon[preferred_taxon]"];
    }
  }

  /**
   * Returns the taxon image to add to each panel.
   *
   * Calculates the file name using the taxon name and builds a FancyBox
   * thumbnail.
   *
   * @param array $options
   *   Control options.
   * @param array $taxon
   *   Taxonomic data read from the database.
   * @param array|null $existingOccurrence
   *   If editing a sample, the existing occurrence data loaded for this panel.
   *
   * @return string
   *   HTML for the image (including wrapping anchor element).
   */
  private static function getTaxonImage(array $options, array $taxon, $existingOccurrence) {
    $path = $options['imagesPath'];
    // Ensure trailing slash.
    $path = (substr($path, -1) !== '/') ? "$path/" : "$path";
    // Get the original default image details.
    $origfilename = $path . preg_replace('/[^a-z0-9]/', '-', strtolower($taxon['taxon'])) . '.jpg';
    $origThumbFilename = $path . 'thumb-' . preg_replace('/[^a-z0-9]/', '-', strtolower($taxon['taxon'])) . '.jpg';
    if (!empty($existingOccurrence['media_path'])) {
      $filename = helper_base::$base_url . "upload/$existingOccurrence[media_path]";
      $thumbFilename = helper_base::$base_url . "upload/thumb-$existingOccurrence[media_path]";
    }
    else {
      $filename = $origfilename;
      $thumbFilename = $origThumbFilename;
    }
    $taxonLabel = self::getFormattedTaxonLabel($taxon, FALSE);
    return <<<HTML
<a class="fancybox" href="$filename" data-orig-href="$origfilename">
  <img src="$thumbFilename" data-orig-src="$origThumbFilename" title="$taxonLabel" alt="$taxonLabel" class="img-rounded">
</a>
HTML;
  }

  /**
   * Returns the species info link for each species panel.
   *
   * @param array $options
   *   Control options.
   * @param array $taxon
   *   Taxonomic data read from the database.
   *
   * @return string
   *   HTML for the link.
   */
  private static function getSpeciesInfoLink(array $options, array $taxon) {
    if (!empty($options['speciesInfoLink'])) {
      return str_replace([
        '{{ species-info-link }}',
        '{{ link-common-name }}'
      ], [
        $options['speciesInfoLink'],
        preg_replace('/[^a-z0-9]/', '-', strtolower($taxon['default_common_name'])),
      ], $options['speciesInfoLinkTemplate']);
    }
    return '';
  }

  /**
   * When editing a sample, load the sample's occurrence data.
   *
   * @param array $auth
   *   Authorisation tokens.
   * @param array $options
   *   Control options array.
   *
   * @return array
   *   List of occurrence data, keyed by preferred taxa_taxon_list ID.
   */
  private static function loadExistingSampleOccurrences($auth, $options) {
    if (!empty(data_entry_helper::$entity_to_load['sample:id'])) {
      iform_load_helpers(['report_helper']);
      $occurrences = report_helper::get_report_data([
        'dataSource' => '/reports_for_prebuilt_forms/photo_checklist/existing_occurrences',
        'extraParams' => [
          'sample_id' => data_entry_helper::$entity_to_load['sample:id'],
          'count_attr_id' => $options['countOccAttrId'],
        ],
        'readAuth' => [
          'auth_token' => $auth['read']['auth_token'],
          'nonce' => $auth['read']['nonce'],
        ],
      ]);
      $occurrencesByPrefId = [];
      foreach ($occurrences as $occurrence) {
        $occurrencesByPrefId[$occurrence['preferred_taxa_taxon_list_id']] = $occurrence;
      }
      return $occurrencesByPrefId;
    }
    return [];
  }

}
