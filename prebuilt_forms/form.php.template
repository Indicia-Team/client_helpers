<?php

/**
 * Indicia, the OPAL Online Recording Toolkit.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/gpl.html.
 *
 * @author Indicia Team
 * @license http://www.gnu.org/licenses/gpl.html GPL 3.0
 * @link https://github.com/Indicia-Team/client_helpers
 */

/**
 *
 *
 * @todo Provide form description in this comment block.
 * @todo Rename the form class to iform_...
 */
class iform_form_name {

  /**
   * Disable form element wrapped around output.
   *
   * @return bool
   *
   * @todo Remove this if the page type is for data entry.
   */
  protected static function isDataEntryForm() {
    return FALSE;
  }

  /**
   * Return the form metadata.
   *
   * Note the title of this method includes the name of the form file. This
   * ensures that if inheritance is used in the forms, subclassed forms don't
   * return their parent's form definition.
   *
   * @return array
   *   The definition of the form.
   *
   * @todo rename this method.
   */
  public static function get_<form_name>_definition() {
    return [
      'title' => '<form title>',
      'category' => '<category title>',
      'helpLink' => '<optional help URL>',
      'description' => '<description>',
    ];
  }

  /**
   * Get the list of parameters for this form.
   *
   * @return array
   *   List of parameters that this form requires.
   *
   * @todo: Implement this method
   */
  public static function get_parameters() {
    return [];
  }

  /**
   * Return the generated form output.
   *
   * @param array $args
   *   List of parameter values passed through to the form depending on how the
   *   form has been configured. This array always contains a value for
   *   language.
   * @param object $nid
   *   The Drupal node object's ID.
   * @param array $response
   *   When this form is reloading after saving a submission, contains the
   *   response from the service call. Note this does not apply when
   *   redirecting (in this case the details of the saved object are in the
   *   $_GET data).
   *
   * @return string
   *   Form HTML.
   *
   * @todo: Implement this method
   */
  public static function get_form($args, $nid, $response = NULL) {

  }

  /**
   * Build a submission array.
   *
   * Optional. Handles the construction of a submission array from a set of
   * form values. Can be ommitted when the prebuilt form does not submit data
   * via a form post. For example, the following represents a submission
   * structure for a simple sample and 1 occurrence submission.
   * `return data_entry_helper::build_sample_occurrence_submission($values);`
   *
   * @param array $values
   *   Associative array of form data values.
   * @param array $args
   *   IForm parameters.
   *
   * @return array
   *   Submission structure.
   *
   * @todo: Implement or remove this method
   */
  public static function get_submission($values, $args) {

  }

  /**
   * Calculate redirection after submission.
   *
   * Optional method to override the page that is redirected to after a
   * successful save operation. This allows the destination to be chosen
   * dynamically.
   *
   * @param array $values
   *   Associative array of form data values.
   * @param array $args
   *   IForm parameters.
   *
   * @return string
   *   Destination URL.
   *
   * @todo: Implement or remove this method.
   */
  public static function get_redirect_on_success($values, $args) {
    return '';
  }

}
